[{"id":"4b437759b686963759bdadcd9e12a2eb","title":"皮革工廠化驗室助理之工作心得","content":"# 高中畢業的第一份工作\n# tags: 黑馬 ssm\n高中畢業的第一份工作\n工作環境：☆ ☆ ☆ ☆ ☆\n工作難度：★ ★ ★ ☆ ☆\n工作速度：★ ★ ☆ ☆ ☆\n工作量  ：★ ☆ ☆ ☆ ☆\n\n\n以上是染織皮革的工作環境\n\n# 工作流程\n浴室部份 - 基於試做 2 天而已而做的紀錄\n\n打完卡先去檢查負責樓層的房間有沒有房客是有在門口放須清潔的卡牌與前日未清洗衣物，拿到辦公室去做填表檢查與登記，再把衣物清潔卡牌放在客人門旁\n先檢查負責的房間號數看燈是否裡面有客人，房務車必須從清潔室開出來並來到客人門前先敲 3 下說 house keepping 3 次，如沒人回應先開門放萬能房卡開燈\n\n\n第一步先去丟浴室與房間垃圾，並拿垃圾袋裝垃圾桶用垃圾袋轉一圈卡好垃圾桶的口徑，而後把卷型衛生紙第一張摺三角形\n收毛巾 3 小毛巾 2 中毛巾 2 大毛巾 （ 如果是人數是 3 人或是 4 人會不一樣 ）\n會用客人用過得毛巾看有沒有明顯的垃圾在浴室先收\n洗杯子跟清熱水壺底垢（用檸檬酸）\n用清潔劑在浴室各處噴一些（依照順序 - 鏡子 洗手台 浴缸 浴室 馬桶 地板噴一些) 快速噴一遍 沖一遍 再拿大毛巾 擦一遍 最後再用吸塵器把地板與抽屜吸頭髮吸乾淨（也可以用毛巾輕輕貼著地板慢慢拖地板拖到門外）\n補補品\n15 間房間清潔完去 3 樓補補品，最後回到辦公室等時間下班\n\n\n\n# 其他狀況\n\n工作有時候非常快，但當客人沒有清潔時，有時候工作不會太多\n8:30 上工客人有時候會賴床不早起出門這時候就要等待時間到 9:30 到 10:00 的時候才會開工清潔，但會非常趕因此我們的吃飯時間只有半小時\n\n### 心得\n這是份須要勤奮快速的工作 (服務業), 蠻容易受小擦傷的工作 (因為要跪在浴缸邊邊頭朝下腳朝上) 主要是膝蓋與手指（補品邊邊太尖銳）, 適合轉職前的跳板工作，偏向大學生打工或是快手歐巴桑在做的工作\n","slug":"4b437759b686963759bdadcd9e12a2eb","date":"2023-11-18T02:32:13.040Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"7353f6ade6cfad2da6fa2945ff810d44","title":"光學強化員之工作心得","content":"從事生產線的第一份工作，深刻體會製造業的辛勞，哪怕是再小間不過的家族企業\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n# 工作流程\n浴室部份 - 基於試做 2 天而已而做的紀錄\n\n打完卡先去檢查負責樓層的房間有沒有房客是有在門口放須清潔的卡牌與前日未清洗衣物，拿到辦公室去做填表檢查與登記，再把衣物清潔卡牌放在客人門旁\n先檢查負責的房間號數看燈是否裡面有客人，房務車必須從清潔室開出來並來到客人門前先敲 3 下說 house keepping 3 次，如沒人回應先開門放萬能房卡開燈\n\n\n第一步先去丟浴室與房間垃圾，並拿垃圾袋裝垃圾桶用垃圾袋轉一圈卡好垃圾桶的口徑，而後把卷型衛生紙第一張摺三角形\n收毛巾 3 小毛巾 2 中毛巾 2 大毛巾 （ 如果是人數是 3 人或是 4 人會不一樣 ）\n會用客人用過得毛巾看有沒有明顯的垃圾在浴室先收\n洗杯子跟清熱水壺底垢（用檸檬酸）\n用清潔劑在浴室各處噴一些（依照順序 - 鏡子 洗手台 浴缸 浴室 馬桶 地板噴一些) 快速噴一遍 沖一遍 再拿大毛巾 擦一遍 最後再用吸塵器把地板與抽屜吸頭髮吸乾淨（也可以用毛巾輕輕貼著地板慢慢拖地板拖到門外）\n補補品\n15 間房間清潔完去 3 樓補補品，最後回到辦公室等時間下班\n\n\n\n# 其他狀況\n\n工作有時候非常快，但當客人沒有清潔時，有時候工作不會太多\n8:30 上工客人有時候會賴床不早起出門這時候就要等待時間到 9:30 到 10:00 的時候才會開工清潔，但會非常趕因此我們的吃飯時間只有半小時\n\n### 心得\n這是份須要勤奮快速的工作 (服務業), 蠻容易受小擦傷的工作 (因為要跪在浴缸邊邊頭朝下腳朝上) 主要是膝蓋與手指（補品邊邊太尖銳）, 適合轉職前的跳板工作，偏向大學生打工或是快手歐巴桑在做的工作\n More info: Deployment\n","slug":"7353f6ade6cfad2da6fa2945ff810d44","date":"2023-11-18T02:30:19.552Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"c2fc05de7ce47073f1aaf0c41771db06","title":"印刷學徒の打工心得","content":"# 前言\n目前工作做過最差勁的工作，粗工不說，偏偏說很乾淨，還說裡面都大學畢業，結果通通是外勞，雖然試做只有 3 天但只給 800 沒勞健保，以後看到這篇文章的人都不要去應徵安平工業區的工作\n## 評價\n(惡夢級工作，跟工地粗工有得比)\n工作素質：★ ★ ☆ ☆ ☆\n工作環境：★ ★ ★ ☆ ☆\n工作難度：★ ★ ★ ★ ★ ★\n工作速度：★ ★ ★ ★ ★ ★\n工作量  ：★ ★ ★ ★ ★ ★ ★\n工時長  ：★ ★ ★ ★ ★ ★\n# 工作流程\n打完卡 - 開始理上千張的紙\n\n不斷的將詹板上的紙推到專門放紙的地方像撲克牌一樣往上推直到邊邊都整整齊齊，印完才能推到機器下讓他吸上去進機器印刷\n換印刷呂板\n將清潔劑塗在呂板上\n\n# 其他狀況\n\n除了差點累死外（要叫救護車的情況）否則沒有其他狀況\n\n### 心得\n完全是外勞主場的工作，非常不行的工作，明明要淘汰的工廠狗眼纏喘，爛得要死的工作，又都完全沒有福利可言，讓我萌出想去勞工局投訴的工作，難怪安平工業區沒人想去\n","slug":"c2fc05de7ce47073f1aaf0c41771db06","date":"2023-11-18T02:29:26.200Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"9c93d4d87cbed3b1aa980a2ee27a2957","title":"全聯生鮮人員の打工心得","content":"# 前言\n做快一個月 (後來放棄，剩叫貨跟後台管理沒學，很吃速度跟細心（我的死穴）\n## 評價\n工作素質：★ ★ ★ ★ ★\n工作環境：★ ★ ★ ★ ★\n工作難度：★ ★ ★ ★ ☆\n工作速度：★ ★ ★ ★ ★\n工作量  ：★ ★ ★ ★ ★\n工時長  ：★ ★ ★ ★ ☆\n# 工作 sop 流程\n\n驗貨大概要 15 分鐘以內要驗完，早上第一件事情印價卡與折價卡貼折扣要 7:30 最慢要把蛋糕麵包貼完，補貨到驗單最慢要到 10:30（至少），每過一個星期要加速一次，上午下午都要各拍照 4 張整個都要拍照（蛋糕麵包調理魚肉加生鮮室清掃拍水溝 3 整體 1），一定要寫筆記（我的筆記本寫到爛掉），目前聽是干貨跟門市工作比較稍稍少一點點？（沒做過干貨不過要搬重物門市要推 pxpay…） （dcard 圖片為何這麼模糊啊……）4:30 有時候要叫賣試吃（這看每家店經理怎麼做，我家的全聯是放大聲公還是錄音擺在那客人要吃自己去拿，我待的店是要兩個人在那邊）\n\n\n\n檔案傳輸  機器：登入 (這個輸入一次機器就會記住了)  2. XXX 3.XXX  1.XXX\n\n\n商品折扣  機器 ：登入  1. XXX 5. XXX 4.  XXX 1.XXX（不知道你看不看得懂……）\n\n\n冷凍櫃跟調理最上面一排每周一折價一次 6 折\n\n\n下面這張是我記性不好夾在手機殼里可以直接拿出來看呼出碼，\n蝦子早上 40 下午 41 晚上 42\n 透抽跟秋刀魚入庫冷凍要入庫表 3\nhttps://i.imgur.com/tlJULup.png\nhttps://i.imgur.com/AgAmHWo.png\n# 其他狀況\n應徵全聯建議以小間為主，因為燈光為橘色的全聯通常已是中小賣場的程度，這種通常是工作量要 4 位生鮮人員卻是只有 2 位在做而已，還有旗艦店加颱風天會造成進貨量 30 到 50 以上藍色貨籃的籠車\n\n最初設計的小間全聯                          :13 到 28 內以上藍黃色貨籃的籠車（猜測）\n地板為木質燈光為橘色的中小賣場全聯         :18 到 35 內以上藍黃色貨籃的籠車\n旗艦店全聯（有機會裡面有賣衣服的日本品牌)  :30 到 50 以上藍黃色貨籃的籠車\n\n# 工作心得\n\n可以學到 xsl 跟 後台貨物管理學，會比一般的服務業還要難，不單純是快手的工作，記性還要非常好，學一次就要會了，因為毛利迫使這個行業對待新人不能慢慢學慢慢教，可能休息了，你還是很緊繃，除非自己需求是一定要有冷氣＆又乾淨的工作環境，或是有興趣跟想後台商店管理，否則不是很推薦的工作，但如果缺錢偶爾打打工的話可以去見\n見世面\n\n","slug":"9c93d4d87cbed3b1aa980a2ee27a2957","date":"2023-11-18T02:17:48.992Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"7943a8a21f291e10dfddf0ec1762d007","title":"使用2dlive在blog與老婆們相遇 （折騰中","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28     我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# 引用文獻\n\n\n[1] 百度学术\n\n\n\n\n[2] akilar 的糖果屋\n\n[在网页中添加 Live2D 看板娘]（https://github.com/stevenjoezhang/live2d-widget）\nakilar 的糖果屋 -Live2d Widget \nc10udlnk 的 blog\namaya 夜雨\nc10udlnk 的 blog\nfghrsh 的博客 - 网页添加 Live2D 看板娘\nEikanya’s Blog（看板娘動畫大佬）\nEikanya’s Blog - Live2d 配置 - Live2d 的 moc3 設定說明\n 7.5. Eikanya’s Blog - 雙生 live2d 提取\n筱鋒 xiao_lfeng\n保羅的小宇宙 - 給你的部落格增加動態看板娘\n\n\n\n\nお前はどこまで見えている \n[部落格通用版 Live2d 伊斯特瓦爾發布] (https://www.wikimoe.com/?post=76)\n惡 e 魔 m 蘿 lo 莉 li 控 - 為部落格加入能動的看板娘 (Live2D)- 將其加入網頁上吧\n給你的部落格增加動態看板娘\n[pio]（https://docs.paul.ren/pio/#/?id = 引用 - css - 资源）\nHexo 部落格新增 live2d 看板娘 - 可換裝，增刪模型\n\nh$ hexo deployMore info: Deployment\n","slug":"7943a8a21f291e10dfddf0ec1762d007","date":"2023-11-16T13:42:47.196Z","categories_index":"coding","tags_index":"2dlive","author_index":"DILL"},{"id":"45b05c0adc7d6b51711d3e13e977b9ba","title":"hexo","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\nhttps://hjweb.jp/article/195913/\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"45b05c0adc7d6b51711d3e13e977b9ba","date":"2023-11-15T14:55:59.596Z","categories_index":"hexo","tags_index":"hexo 框架簡單介紹","author_index":"DILL"},{"id":"1c1ab6666bf993e28cde44cc752472f2","title":"leedcode 每日一題","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\nhttps://mx.paul.ren/model/neptune.html\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"1c1ab6666bf993e28cde44cc752472f2","date":"2023-11-15T13:43:28.828Z","categories_index":"leedcode","tags_index":"coding","author_index":"DILL"},{"id":"516b163a4c344ecca10d3bad25b91b84","title":"公仔材料討論製作","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\nhttps://hjweb.jp/article/195913/\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"516b163a4c344ecca10d3bad25b91b84","date":"2023-11-15T13:14:56.144Z","categories_index":"Art & make","tags_index":"藝術品製作","author_index":"DILL"},{"id":"96be416d1cdbb2724b32353fe56e5bc4","title":"讀書方法","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"96be416d1cdbb2724b32353fe56e5bc4","date":"2023-11-11T14:50:29.920Z","categories_index":"Read & study","tags_index":"讀書方法","author_index":"DILL"},{"id":"f8ca8cbbd74bac4fbc08f0a454ee74f1","title":"使用linux玩原神Genshin impact 之dawn補丁用法 （原神3.8之後即可不用!但會被米哈遊回報給後台）","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"f8ca8cbbd74bac4fbc08f0a454ee74f1","date":"2023-11-05T13:38:56.552Z","categories_index":"coding","tags_index":"補丁","author_index":"DILL"},{"id":"77a4eca71d22855c8aa96728dfd561ba","title":"Stable-diffusion  AI 生成繪圖","content":"# 自從看了 &quot;用 springboot 建立一個小而美的 blog&quot;B 站視頻後，就發現如今若是要建立一個博客，可能相對於 jpa 來說 mybatics 更適合用來當作是入門程式小白的優先選擇，可能不是執行效率最快，但是至少開發來講沒這麼折騰燒腦\n# tags: 黑馬 ssm\n# 依賴注入方式 20230929\n[TOC]\n# 思考：向一個類中傳遞數據的方法有幾種？\n# 普通方法 (set 方法)\n# 構造方法\n# 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？\n\n\n引用類型\n\n\n簡單類型（基本數據類型 string）\n\n\n依賴注入方式\n\nsetter 注入\n - 簡單類型\n - 引用類型\n構造器 注入\n - 簡單類型\n - 引用類型\n\n\n\n\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n\n# \n\n配置中使用 property 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n\n# 構造器注入\n&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n\n\n\n構造器注入 — 引用類型（了解）\n\n在 bean 中定義引用類型屬性並提供可訪問的構造方法\n\n\n\npublic class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n\n- 配置中使用 constructor-arg 標籤 ref 屬性注入引用類型對象\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n\n# 構造器注入 -- 簡單類型\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n\n\n配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n# 構造器注入 — 參數適配\n\n配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n\n\n配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n\n依賴注入方式選擇\n\n強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現\n可選依賴使用 setter 注入進行，靈活性強\nspring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹\n如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入\n實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入\n自己開發的模塊推薦使用 setter 注入\n\n# 小結\n\n依賴注入方式\n\nsetter 注入\n\n簡單類型\n引用類型\n\n\n構造器注入\n\n簡單類型\n引用類型\n\n\n\n\n依賴注入方式選擇\n\n建議使用 setter 注入\n第三方技術根據情況選擇\n\n\n\n# 依賴自動裝配\n\n配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型\n\n&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n\n# 依賴自動裝配特征\n\n自動裝配用於引用類型依賴注入，不能對簡單類型進行操作\n使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用\n使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合\n自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效\n\n# 小結\n\n自動裝配概念\n自動裝配類型\n\n\n# 注入集合對象\n\n\n注入數組對象\n\n數組\nlist\nset\nmap\nproperties\n\n\n\n&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n\n# 小結\n\n注入集合\n\n# 案例：數據源對象管理\n\n\n第三方資源配置管理\n\n\n導入 druid 座標\n\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n\n配置數據源對象作為 spring 管理的 bean\n\n&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n\n# 小結\n\n\nspring 管理第三方資源\n\nDruidDataSource\nComboPooledDataSource\n\n\n\n\n# 加載 properties 文件\n\n不加載系統屬性\n\n&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n\n\n加載多個 properties 文件\n\n&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n\n\n加載所以 properties 文件\n\n&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n\n\n加載 properties 文件標準格式\n\n&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n\n\n從類路徑或 jar 包中搜索並加載 properties 文件\n\n&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n\n# 小結\n\n加載 properties 配置文件信息\n開啟命名空間方式\n\n# 容器\n\n創建容器\n獲取 bean\n容器類層次結構\nbeanFactory\n\n# 創建容器\n\n方式一：類路徑加載配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n\n\n加載多個配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n\n# 獲取 bean\n\n方式一：使用 bean 名稱獲取\n\nBookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nBookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n\n\n方法三：使用 bean 類型獲取\n\nBookDao bookDao= ctx.getBean(BookDao.class);\n\n\n# 核心容器總結\n\n容器相關\nbean 相關\n依賴注入相關\n\n\n\n\nBeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載\napplicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載\napplicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能\napplicationContext 接口常用初始化類\n\nClassPathXmlApplicationContext\nFileSystemXmlApplicationContext\n\n\n\n\n\n&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n\n\n\n\n中央處理器(cpu)\n英文\n功能\n\n\n\n\n數據記憶體；資料記憶體\ndata memory\nCPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置\n\n\n\n\n----\n:----:\n----\n\n\n\n\n# jump 指令 細分種類\n\n\n\n暫存器種類\nFunction\n\n\n\n\n資料暫存器\n用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。\n功能\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n\n\n\n\n# 講解 REGISTER 與 verilog 程式結構\n\n\n\n\n\n\n\n\n\n[name=bill503084699]\n\n\n\n\n2. 介紹以 Register 的架構所呈現出來的圖\n  用第三組的圖去做詮釋\n\n\n# 定義接腳\n\n\n依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來\n然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先\n\n\n\n\n\n前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間\n\n\n相關圖片比較 (比較知道腳位寫在哪)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n# 設定 register 內定的假設式子\nreg[31:0]regfile[31:0];\n\n||||\n5. kim 總結 32 個抽屜 裏頭有 32 個格\n\n\n\n\n\n\n\n\n# 補充下面\n\n\nclock always 的式子\nalways@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"77a4eca71d22855c8aa96728dfd561ba","date":"2023-11-04T14:21:04.977Z","categories_index":"AI","tags_index":"AI生成繪圖","author_index":"DILL"},{"id":"68222b82643fcc43d84fa4d6c522dc13","title":"學習網頁後端ssm框架筆記（黑馬","content":"# 自從看了 &quot;用 springboot 建立一個小而美的 blog&quot;B 站視頻後，就發現如今若是要建立一個博客，可能相對於 jpa 來說 mybatics 更適合用來當作是入門程式小白的優先選擇，可能不是執行效率最快，但是至少開發來講沒這麼折騰燒腦\n# tags: 黑馬 ssm\n# 依賴注入方式 20230929\n[TOC]\n# 思考：向一個類中傳遞數據的方法有幾種？\n# 普通方法 (set 方法)\n# 構造方法\n# 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？\n\n\n引用類型\n\n\n簡單類型（基本數據類型 string）\n\n\n依賴注入方式\n\nsetter 注入\n - 簡單類型\n - 引用類型\n構造器 注入\n - 簡單類型\n - 引用類型\n\n\n\n\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n\n# \n\n配置中使用 property 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n\n# 構造器注入\n&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n\n\n\n構造器注入 — 引用類型（了解）\n\n在 bean 中定義引用類型屬性並提供可訪問的構造方法\n\n\n\npublic class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n\n- 配置中使用 constructor-arg 標籤 ref 屬性注入引用類型對象\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n\n# 構造器注入 -- 簡單類型\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n\n\n配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n# 構造器注入 — 參數適配\n\n配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n\n\n配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n\n依賴注入方式選擇\n\n強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現\n可選依賴使用 setter 注入進行，靈活性強\nspring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹\n如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入\n實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入\n自己開發的模塊推薦使用 setter 注入\n\n# 小結\n\n依賴注入方式\n\nsetter 注入\n\n簡單類型\n引用類型\n\n\n構造器注入\n\n簡單類型\n引用類型\n\n\n\n\n依賴注入方式選擇\n\n建議使用 setter 注入\n第三方技術根據情況選擇\n\n\n\n# 依賴自動裝配\n\n配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型\n\n&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n\n# 依賴自動裝配特征\n\n自動裝配用於引用類型依賴注入，不能對簡單類型進行操作\n使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用\n使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合\n自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效\n\n# 小結\n\n自動裝配概念\n自動裝配類型\n\n\n# 注入集合對象\n\n\n注入數組對象\n\n數組\nlist\nset\nmap\nproperties\n\n\n\n&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n\n# 小結\n\n注入集合\n\n# 案例：數據源對象管理\n\n\n第三方資源配置管理\n\n\n導入 druid 座標\n\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n\n配置數據源對象作為 spring 管理的 bean\n\n&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n\n# 小結\n\n\nspring 管理第三方資源\n\nDruidDataSource\nComboPooledDataSource\n\n\n\n\n# 加載 properties 文件\n\n不加載系統屬性\n\n&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n\n\n加載多個 properties 文件\n\n&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n\n\n加載所以 properties 文件\n\n&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n\n\n加載 properties 文件標準格式\n\n&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n\n\n從類路徑或 jar 包中搜索並加載 properties 文件\n\n&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n\n# 小結\n\n加載 properties 配置文件信息\n開啟命名空間方式\n\n# 容器\n\n創建容器\n獲取 bean\n容器類層次結構\nbeanFactory\n\n# 創建容器\n\n方式一：類路徑加載配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n\n\n加載多個配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n\n# 獲取 bean\n\n方式一：使用 bean 名稱獲取\n\nBookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nBookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n\n\n方法三：使用 bean 類型獲取\n\nBookDao bookDao= ctx.getBean(BookDao.class);\n\n\n# 核心容器總結\n\n容器相關\nbean 相關\n依賴注入相關\n\n\n\n\nBeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載\napplicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載\napplicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能\napplicationContext 接口常用初始化類\n\nClassPathXmlApplicationContext\nFileSystemXmlApplicationContext\n\n\n\n\n\n&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n\n\n\n\n中央處理器(cpu)\n英文\n功能\n\n\n\n\n數據記憶體；資料記憶體\ndata memory\nCPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置\n\n\n\n\n----\n:----:\n----\n\n\n\n\n# jump 指令 細分種類\n\n\n\n暫存器種類\nFunction\n\n\n\n\n資料暫存器\n用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。\n功能\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n\n\n\n\n# 講解 REGISTER 與 verilog 程式結構\n\n\n\n\n\n\n\n\n\n[name=bill503084699]\n\n\n\n\n2. 介紹以 Register 的架構所呈現出來的圖\n  用第三組的圖去做詮釋\n\n\n# 定義接腳\n\n\n依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來\n然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先\n\n\n\n\n\n前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間\n\n\n相關圖片比較 (比較知道腳位寫在哪)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n# 設定 register 內定的假設式子\nreg[31:0]regfile[31:0];\n\n||||\n5. kim 總結 32 個抽屜 裏頭有 32 個格\n\n\n\n\n\n\n\n\n# 補充下面\n\n\nclock always 的式子\nalways@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"68222b82643fcc43d84fa4d6c522dc13","date":"2023-11-04T13:52:14.005Z","categories_index":"coding","tags_index":"後端","author_index":"DILL"},{"id":"7b3b1dbeacc1173bdc701e39ee099afa","title":"景觀修復師の工作心得","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nhttps://i.imgur.com/ZKHlKFO.jpg\n# Quick Start\ndate: 2023-10-11 10:52:36\n# Create a new post\nh$ hexo new \"My New Post\"More info: Writing\n# Run server\nh$ hexo serverMore info: Server\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"7b3b1dbeacc1173bdc701e39ee099afa","date":"2023-11-04T09:25:22.472Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"}]