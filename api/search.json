[{"id":"45b05c0adc7d6b51711d3e13e977b9ba","title":"hexo","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\nhttps://hjweb.jp/article/195913/\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"45b05c0adc7d6b51711d3e13e977b9ba","date":"2023-11-15T14:55:59.596Z","categories_index":"hexo","tags_index":"hexo 框架簡單介紹","author_index":"DILL"},{"id":"1c1ab6666bf993e28cde44cc752472f2","title":"leedcode 每日一題","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\nhttps://mx.paul.ren/model/neptune.html\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"1c1ab6666bf993e28cde44cc752472f2","date":"2023-11-15T13:43:28.828Z","categories_index":"leedcode","tags_index":"coding","author_index":"DILL"},{"id":"516b163a4c344ecca10d3bad25b91b84","title":"公仔材料討論製作","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\nhttps://hjweb.jp/article/195913/\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"516b163a4c344ecca10d3bad25b91b84","date":"2023-11-15T13:14:56.144Z","categories_index":"Art & make","tags_index":"藝術品製作","author_index":"DILL"},{"id":"96be416d1cdbb2724b32353fe56e5bc4","title":"讀書方法","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"96be416d1cdbb2724b32353fe56e5bc4","date":"2023-11-11T14:50:29.920Z","categories_index":"Read & study","tags_index":"讀書方法","author_index":"DILL"},{"id":"7943a8a21f291e10dfddf0ec1762d007","title":"使用2dlive在blog與老婆們相遇 （折騰中","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"7943a8a21f291e10dfddf0ec1762d007","date":"2023-11-10T14:56:32.412Z","categories_index":"coding","tags_index":"2dlive","author_index":"DILL"},{"id":"f8ca8cbbd74bac4fbc08f0a454ee74f1","title":"使用linux玩原神Genshin impact 之dawn補丁用法 （原神3.8之後即可不用!但會被米哈遊回報給後台）","content":"之前折騰很久的 linux 玩原神的方法，每次更新就要用一次\n# 依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"f8ca8cbbd74bac4fbc08f0a454ee74f1","date":"2023-11-05T13:38:56.552Z","categories_index":"coding","tags_index":"補丁","author_index":"DILL"},{"id":"4b437759b686963759bdadcd9e12a2eb","title":"皮革工廠化驗室助理之工作心得","content":"# 高中畢業的第一份工作\n# tags: 黑馬 ssm\n高中畢業的第一份工作\n工作環境：☆ ☆ ☆ ☆ ☆\n工作難度：★ ★ ★ ☆ ☆\n工作速度：★ ★ ☆ ☆ ☆\n工作量  ：★ ☆ ☆ ☆ ☆\n# 依賴注入方式 20230929\n[TOC]\n\n# 思考：向一個類中傳遞數據的方法有幾種？\n# 普通方法 (set 方法)\n# 構造方法\n# 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？\n\n\n引用類型\n\n\n簡單類型（基本數據類型 string）\n\n\n依賴注入方式\n\nsetter 注入\n - 簡單類型\n - 引用類型\n構造器 注入\n - 簡單類型\n - 引用類型\n\n\n\n\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n\n# \n\n配置中使用 property 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n\n# 構造器注入\n&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n\n\n\n構造器注入 — 引用類型（了解）\n\n在 bean 中定義引用類型屬性並提供可訪問的構造方法\n\n\n\npublic class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n\n- 配置中使用 constructor-arg 標籤 ref 屬性注入引用類型對象\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n\n# 構造器注入 -- 簡單類型\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n\n\n配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n# 構造器注入 — 參數適配\n\n配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n\n\n配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n\n依賴注入方式選擇\n\n強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現\n可選依賴使用 setter 注入進行，靈活性強\nspring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹\n如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入\n實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入\n自己開發的模塊推薦使用 setter 注入\n\n# 小結\n\n依賴注入方式\n\nsetter 注入\n\n簡單類型\n引用類型\n\n\n構造器注入\n\n簡單類型\n引用類型\n\n\n\n\n依賴注入方式選擇\n\n建議使用 setter 注入\n第三方技術根據情況選擇\n\n\n\n# 依賴自動裝配\n\n配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型\n\n&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n\n# 依賴自動裝配特征\n\n自動裝配用於引用類型依賴注入，不能對簡單類型進行操作\n使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用\n使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合\n自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效\n\n# 小結\n\n自動裝配概念\n自動裝配類型\n\n\n# 注入集合對象\n\n\n注入數組對象\n\n數組\nlist\nset\nmap\nproperties\n\n\n\n&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n\n# 小結\n\n注入集合\n\n# 案例：數據源對象管理\n\n\n第三方資源配置管理\n\n\n導入 druid 座標\n\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n\n配置數據源對象作為 spring 管理的 bean\n\n&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n\n# 小結\n\n\nspring 管理第三方資源\n\nDruidDataSource\nComboPooledDataSource\n\n\n\n\n# 加載 properties 文件\n\n不加載系統屬性\n\n&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n\n\n加載多個 properties 文件\n\n&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n\n\n加載所以 properties 文件\n\n&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n\n\n加載 properties 文件標準格式\n\n&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n\n\n從類路徑或 jar 包中搜索並加載 properties 文件\n\n&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n\n# 小結\n\n加載 properties 配置文件信息\n開啟命名空間方式\n\n# 容器\n\n創建容器\n獲取 bean\n容器類層次結構\nbeanFactory\n\n# 創建容器\n\n方式一：類路徑加載配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n\n\n加載多個配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n\n# 獲取 bean\n\n方式一：使用 bean 名稱獲取\n\nBookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nBookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n\n\n方法三：使用 bean 類型獲取\n\nBookDao bookDao= ctx.getBean(BookDao.class);\n\n\n# 核心容器總結\n\n容器相關\nbean 相關\n依賴注入相關\n\n\n\n\nBeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載\napplicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載\napplicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能\napplicationContext 接口常用初始化類\n\nClassPathXmlApplicationContext\nFileSystemXmlApplicationContext\n\n\n\n\n\n&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n\n\n\n\n中央處理器(cpu)\n英文\n功能\n\n\n\n\n數據記憶體；資料記憶體\ndata memory\nCPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置\n\n\n\n\n----\n:----:\n----\n\n\n\n\n# jump 指令 細分種類\n\n\n\n暫存器種類\nFunction\n\n\n\n\n資料暫存器\n用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。\n功能\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n\n\n\n\n# 講解 REGISTER 與 verilog 程式結構\n\n\n\n\n\n\n\n\n\n[name=bill503084699]\n\n\n\n\n2. 介紹以 Register 的架構所呈現出來的圖\n  用第三組的圖去做詮釋\n\n\n# 定義接腳\n\n\n依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來\n然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先\n\n\n\n\n\n前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間\n\n\n相關圖片比較 (比較知道腳位寫在哪)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n# 設定 register 內定的假設式子\nreg[31:0]regfile[31:0];\n\n||||\n5. kim 總結 32 個抽屜 裏頭有 32 個格\n\n\n\n\n\n\n\n\n# 補充下面\n\n\nclock always 的式子\nalways@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"4b437759b686963759bdadcd9e12a2eb","date":"2023-11-05T03:37:25.668Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"7353f6ade6cfad2da6fa2945ff810d44","title":"光學強化員之工作心得","content":"從事生產線的第一份工作，深刻體會製造業的辛勞，哪怕是再小間不過的家族企業\n# 依賴注入方式 20230929\n[TOC]\n## 評價\n工作環境：★ ★ ★ ★ ☆\n工作難度：★ ☆ ☆ ☆ ☆\n工作速度：★ ★ ★ ☆ ☆\n工作量  ：★ ★ ★ ★ ★ ★\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"7353f6ade6cfad2da6fa2945ff810d44","date":"2023-11-05T03:21:16.496Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"77a4eca71d22855c8aa96728dfd561ba","title":"Stable-diffusion  AI 生成繪圖","content":"# 自從看了 &quot;用 springboot 建立一個小而美的 blog&quot;B 站視頻後，就發現如今若是要建立一個博客，可能相對於 jpa 來說 mybatics 更適合用來當作是入門程式小白的優先選擇，可能不是執行效率最快，但是至少開發來講沒這麼折騰燒腦\n# tags: 黑馬 ssm\n# 依賴注入方式 20230929\n[TOC]\n# 思考：向一個類中傳遞數據的方法有幾種？\n# 普通方法 (set 方法)\n# 構造方法\n# 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？\n\n\n引用類型\n\n\n簡單類型（基本數據類型 string）\n\n\n依賴注入方式\n\nsetter 注入\n - 簡單類型\n - 引用類型\n構造器 注入\n - 簡單類型\n - 引用類型\n\n\n\n\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n\n# \n\n配置中使用 property 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n\n# 構造器注入\n&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n\n\n\n構造器注入 — 引用類型（了解）\n\n在 bean 中定義引用類型屬性並提供可訪問的構造方法\n\n\n\npublic class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n\n- 配置中使用 constructor-arg 標籤 ref 屬性注入引用類型對象\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n\n# 構造器注入 -- 簡單類型\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n\n\n配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n# 構造器注入 — 參數適配\n\n配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n\n\n配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n\n依賴注入方式選擇\n\n強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現\n可選依賴使用 setter 注入進行，靈活性強\nspring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹\n如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入\n實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入\n自己開發的模塊推薦使用 setter 注入\n\n# 小結\n\n依賴注入方式\n\nsetter 注入\n\n簡單類型\n引用類型\n\n\n構造器注入\n\n簡單類型\n引用類型\n\n\n\n\n依賴注入方式選擇\n\n建議使用 setter 注入\n第三方技術根據情況選擇\n\n\n\n# 依賴自動裝配\n\n配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型\n\n&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n\n# 依賴自動裝配特征\n\n自動裝配用於引用類型依賴注入，不能對簡單類型進行操作\n使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用\n使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合\n自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效\n\n# 小結\n\n自動裝配概念\n自動裝配類型\n\n\n# 注入集合對象\n\n\n注入數組對象\n\n數組\nlist\nset\nmap\nproperties\n\n\n\n&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n\n# 小結\n\n注入集合\n\n# 案例：數據源對象管理\n\n\n第三方資源配置管理\n\n\n導入 druid 座標\n\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n\n配置數據源對象作為 spring 管理的 bean\n\n&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n\n# 小結\n\n\nspring 管理第三方資源\n\nDruidDataSource\nComboPooledDataSource\n\n\n\n\n# 加載 properties 文件\n\n不加載系統屬性\n\n&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n\n\n加載多個 properties 文件\n\n&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n\n\n加載所以 properties 文件\n\n&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n\n\n加載 properties 文件標準格式\n\n&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n\n\n從類路徑或 jar 包中搜索並加載 properties 文件\n\n&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n\n# 小結\n\n加載 properties 配置文件信息\n開啟命名空間方式\n\n# 容器\n\n創建容器\n獲取 bean\n容器類層次結構\nbeanFactory\n\n# 創建容器\n\n方式一：類路徑加載配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n\n\n加載多個配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n\n# 獲取 bean\n\n方式一：使用 bean 名稱獲取\n\nBookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nBookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n\n\n方法三：使用 bean 類型獲取\n\nBookDao bookDao= ctx.getBean(BookDao.class);\n\n\n# 核心容器總結\n\n容器相關\nbean 相關\n依賴注入相關\n\n\n\n\nBeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載\napplicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載\napplicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能\napplicationContext 接口常用初始化類\n\nClassPathXmlApplicationContext\nFileSystemXmlApplicationContext\n\n\n\n\n\n&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n\n\n\n\n中央處理器(cpu)\n英文\n功能\n\n\n\n\n數據記憶體；資料記憶體\ndata memory\nCPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置\n\n\n\n\n----\n:----:\n----\n\n\n\n\n# jump 指令 細分種類\n\n\n\n暫存器種類\nFunction\n\n\n\n\n資料暫存器\n用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。\n功能\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n\n\n\n\n# 講解 REGISTER 與 verilog 程式結構\n\n\n\n\n\n\n\n\n\n[name=bill503084699]\n\n\n\n\n2. 介紹以 Register 的架構所呈現出來的圖\n  用第三組的圖去做詮釋\n\n\n# 定義接腳\n\n\n依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來\n然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先\n\n\n\n\n\n前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間\n\n\n相關圖片比較 (比較知道腳位寫在哪)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n# 設定 register 內定的假設式子\nreg[31:0]regfile[31:0];\n\n||||\n5. kim 總結 32 個抽屜 裏頭有 32 個格\n\n\n\n\n\n\n\n\n# 補充下面\n\n\nclock always 的式子\nalways@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"77a4eca71d22855c8aa96728dfd561ba","date":"2023-11-04T14:21:04.977Z","categories_index":"AI","tags_index":"AI生成繪圖","author_index":"DILL"},{"id":"68222b82643fcc43d84fa4d6c522dc13","title":"學習網頁後端ssm框架筆記（黑馬","content":"# 自從看了 &quot;用 springboot 建立一個小而美的 blog&quot;B 站視頻後，就發現如今若是要建立一個博客，可能相對於 jpa 來說 mybatics 更適合用來當作是入門程式小白的優先選擇，可能不是執行效率最快，但是至少開發來講沒這麼折騰燒腦\n# tags: 黑馬 ssm\n# 依賴注入方式 20230929\n[TOC]\n# 思考：向一個類中傳遞數據的方法有幾種？\n# 普通方法 (set 方法)\n# 構造方法\n# 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？\n\n\n引用類型\n\n\n簡單類型（基本數據類型 string）\n\n\n依賴注入方式\n\nsetter 注入\n - 簡單類型\n - 引用類型\n構造器 注入\n - 簡單類型\n - 引用類型\n\n\n\n\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n\n# \n\n配置中使用 property 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n\n# 構造器注入\n&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n\n\n\n構造器注入 — 引用類型（了解）\n\n在 bean 中定義引用類型屬性並提供可訪問的構造方法\n\n\n\npublic class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n\n- 配置中使用 constructor-arg 標籤 ref 屬性注入引用類型對象\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n\n# 構造器注入 -- 簡單類型\n\n在 bean 中定義引用類型屬性並提供可訪問的 set 方法\n\npublic class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n\n\n配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n\n# 構造器注入 — 參數適配\n\n配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n\n\n配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入\n\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n\n依賴注入方式選擇\n\n強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現\n可選依賴使用 setter 注入進行，靈活性強\nspring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹\n如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入\n實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入\n自己開發的模塊推薦使用 setter 注入\n\n# 小結\n\n依賴注入方式\n\nsetter 注入\n\n簡單類型\n引用類型\n\n\n構造器注入\n\n簡單類型\n引用類型\n\n\n\n\n依賴注入方式選擇\n\n建議使用 setter 注入\n第三方技術根據情況選擇\n\n\n\n# 依賴自動裝配\n\n配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型\n\n&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n\n# 依賴自動裝配特征\n\n自動裝配用於引用類型依賴注入，不能對簡單類型進行操作\n使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用\n使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合\n自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效\n\n# 小結\n\n自動裝配概念\n自動裝配類型\n\n\n# 注入集合對象\n\n\n注入數組對象\n\n數組\nlist\nset\nmap\nproperties\n\n\n\n&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n\n&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n\n# 小結\n\n注入集合\n\n# 案例：數據源對象管理\n\n\n第三方資源配置管理\n\n\n導入 druid 座標\n\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n\n配置數據源對象作為 spring 管理的 bean\n\n&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n\n# 小結\n\n\nspring 管理第三方資源\n\nDruidDataSource\nComboPooledDataSource\n\n\n\n\n# 加載 properties 文件\n\n不加載系統屬性\n\n&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n\n\n加載多個 properties 文件\n\n&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n\n\n加載所以 properties 文件\n\n&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n\n\n加載 properties 文件標準格式\n\n&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n\n\n從類路徑或 jar 包中搜索並加載 properties 文件\n\n&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n\n# 小結\n\n加載 properties 配置文件信息\n開啟命名空間方式\n\n# 容器\n\n創建容器\n獲取 bean\n容器類層次結構\nbeanFactory\n\n# 創建容器\n\n方式一：類路徑加載配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n\n\n加載多個配置文件\n\nApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n\n# 獲取 bean\n\n方式一：使用 bean 名稱獲取\n\nBookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n\n\n方式二：使用 bean 名稱獲取並指定類型\n\nBookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n\n\n方法三：使用 bean 類型獲取\n\nBookDao bookDao= ctx.getBean(BookDao.class);\n\n\n# 核心容器總結\n\n容器相關\nbean 相關\n依賴注入相關\n\n\n\n\nBeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載\napplicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載\napplicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能\napplicationContext 接口常用初始化類\n\nClassPathXmlApplicationContext\nFileSystemXmlApplicationContext\n\n\n\n\n\n&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n\n\n\n\n中央處理器(cpu)\n英文\n功能\n\n\n\n\n數據記憶體；資料記憶體\ndata memory\nCPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置\n\n\n\n\n----\n:----:\n----\n\n\n\n\n# jump 指令 細分種類\n\n\n\n暫存器種類\nFunction\n\n\n\n\n資料暫存器\n用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。\n功能\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n\n\n\n\n# 講解 REGISTER 與 verilog 程式結構\n\n\n\n\n\n\n\n\n\n[name=bill503084699]\n\n\n\n\n2. 介紹以 Register 的架構所呈現出來的圖\n  用第三組的圖去做詮釋\n\n\n# 定義接腳\n\n\n依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來\n然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先\n\n\n\n\n\n前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間\n\n\n相關圖片比較 (比較知道腳位寫在哪)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n----\n:----:\n:----:\n:---------:\n:----:\n:-------:\n--------\n\n\n\n# 設定 register 內定的假設式子\nreg[31:0]regfile[31:0];\n\n||||\n5. kim 總結 32 個抽屜 裏頭有 32 個格\n\n\n\n\n\n\n\n\n# 補充下面\n\n\nclock always 的式子\nalways@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n\n\n# 補充 下面\n謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數\n不是 bit 表示\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用\n結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此\n當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0\n`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n\n\nclk  將 reset=1’b1 改成！reset 的式子\n\n        \n\n\n\nif (reset=1’b1) reset 拉起來的時候去做重製\nif (!reset)     reset 放下來的時候去做重製\n\n最終呈現 register 電路圖\n\n\n\n\n# 補充 下面\n\n\n# 參考資料\n\n工程師必學電子筆記\nCPU 與記憶體\n自己動手寫 RISC-V CPU -（4）增加分支預測功能\n\n\n\n\n\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"68222b82643fcc43d84fa4d6c522dc13","date":"2023-11-04T13:52:14.005Z","categories_index":"coding","tags_index":"後端","author_index":"DILL"},{"id":"8398b42f070f2b400d41317ef353f01e","title":"工程測量人員の工作內容與心得","content":"https://i.imgur.com/ZKHlKFO.jpg\n\nWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nS\n# Quick Start\ndate: 2022-10-1 10:52:36\n# Create a new post\n# 吳大哥今日教我的東西\n\n\n儀器藍芽的角朝上，放進箱子才能放得剛好 鏡頭朝下\n\n\n用小綾鏡放樣時請按 F4 2 是有出現 EDM 選擇放樣的種類 圓綾鏡 mini\n\n\n大綾鏡 (1.300m) 圓綾鏡\n\n\nRL 純近距離 雷射\n\n\n小綾鏡本身 10cm 加一節加 30cm 以此類推 10 (0.010m) 40（0.040m） 70（0.070m） 100cm （0.100m）因此在綾鏡高上有 0.010m，0.040m,0.070m,0.100m\n\n記得要對◇綾鏡\n高呈才會有扣掉本身綾鏡的高度\n\n\n\n今天測的名稱 3c153 到 3c156\n\n\n     3b153到3c156\n\n\n\n第一步 查找測點 輸入 ABC DEF 字母要多按才能準確找其英文數字，輸入完點號會出現 點號的 xyh\n\n\n要看紅點要用按翻頁\n\n\n然後會出現綾鏡高與角度偏差與水平角度與高呈角度，調□Hz 角度偏差（左右）要用雙手調整個儀器與右邊的旋鈕角度偏差，0’00’10 以內\n\n\n然後調◇___水平角度（上下）要用‘單’手調整整個儀器與左邊的按鈕\n\n\n調完要按測距 (不可以調完再調左邊旋鈕) 然後再調水平角度，調到 0.00X（盡量 0.005 以下）再按翻頁兩次看高呈 181.200 剪掉原先 181.XxX 就是往上多少高呈 ex:181.122 往上 7.8\n\n重點要看紅點跑到哪測距按完再看數字（這很重要）\n\n\n\n儀器周遭走路要輕盈不可以重走與噴漆地板有石頭不可以撥石頭土壤撥到儀器的腳\n\n\n儀器按鈕輕輕按，不然會一次調太多\n\n\n今天吳大哥設的點 rwl1 rwl2\n\n\n後方交會按（重要）測量距離按鈕設點後再按 f1 測量更多點之後按 f4 計算這時候重點先不要按設定 F4，要看誤差值，如果小於 0.005 即可，超過則重測，如果都 ok 就按設定即設定完成\n\n\n氣泡校正在快捷鍵一功能介面裡面的\n\n\n調角度偏差（0”00‘xx 這樣即可）與水平角度偏差其實不用看紅點，要看紅點的是距離在水平◇＿__0.xxx 公尺（裡面），或是再按一次翻頁看◇L___0.005 以下即可\n\n\n工作檔怎麼樣都不要碰除非開機第一次沒設定\n\n\n後方交會第一步 “改 EDM 綾鏡 圓綾鏡” 查找點然後繼續然後對準第一點的大綾鏡然後按 “測距” 然後按測存，F1 測量更多點 F2 相容性 F3 正負鏡 F4 計算，先按 F1 然後對好然後測距再測存之後再按 f4 這時候要等不要亂按任何鍵之後也不要按太快 F4 設定測出誤差值必須小於 0.00‘05 以內或是 0.005m 以內這時候才可以按 F4 設定，如果超過上面的值要重新後方交會（程式 測站）\n\n\n轉旋鈕如果□L 是正則是往下旋轉\n\n\n轉旋鈕如果◇L 是負則是往上旋轉\n\n\n（主要是看選扭下面怎麼轉就是點是往哪裡）\n\n\n如果□L 是正則是要往後（助手角度）L 是負則是要往前\n\n\n如果筷子敲到石頭敲不進去那要選擇釘子然後敲完要噴漆一圈\n\n\n之後要在家裡練習拿小綾鏡測量距離 幾公分幾公分\n\n\n月眉的鋼筋要要幫安全旗外加寫上高程，高程要盡量噴漆噴好\n\n\n善化要選擇座標測量然後架好儀器再投設\n\n\n筷子敲進去有緊即可，噴漆要記得噴清楚\n\n\n當主測能不要遇到複測也就是幫忙檢測前組量的記號能不要測就不要測，能避開就避開\n\n\n負的就是後退，正的就是前進\n\n\n綾鏡其實四節中有一節自平的，這樣才不會有落差 2mm\n\n\n# 台中第二場\n\n志伸 放柱腳是 300 個點 100 柱最快\n其實我們公司算是偏向土木不算是測量，測量只是附加，一般測量公司不會選擇這類工程做\n嗯……RL 是雷射 IR 是綾鏡\n沒調反光貼紙會不會誤差很大，平面誤差通常降低到幾毫米比較準的，如果沒辦法該怎麼辦？豪哥說沒辦法\n平面水準誤差要幾毫米才準\n吳大哥被監工說測太慢\n後方交會如果有兩工作檔都同時有那個測點那就要在工作檔特地找點通常是測點不是已知點\n可以後方交會兩個點再測更多個點會更準\n然後像是測基柱不要太準？平面誤差不要超過 2cm1cm 以上（這個要問志伸）\n吳大哥講得有些太雞蛋挑骨頭，要是砂子地才需要注意測量機腳不要踏太重，然後挑腳不用刻意再踩，不用誤差極為精準\n照理來說測柱點要三個點？，兩個就夠了\n然後通常測量這個工程可能出差都要很久而且都要到處要把高速公路當家裡後院\n組長以前是生物科技\n問達哥排休假的 google 資料表\nleica geo office 軟體把資料傳進去，把 gsi 傳進去\n\n# 1111117 凌晨補筆記\n\n如果助手要增加精準度，可以測手勢或是腳步伐的距離或是在家練習\n用 csv 轉點的話要記得輸出到 dsi 檔的時候首先是東跟北\nautocad 按 3p 可以多重特殊點 按功能 多重點 可以顯點\n開啟 excl 按測量 展點 跑到 2007cad（2015 的 autocad 不行用） 然後對著多重線點按一下，excl 就會出現收點的座標 可以收點\n可以展點\n如果誤差太大的話可以先後方交會完然後去測量控制點，然後再用測點去測，誤差可以低於 0.002 這樣就沒有誤差\n半半校正法其實不用校正管氣泡，基本上只會差 1.2 mm 那怕是導線測量測高程其實也不用校正管氣泡 (?)\n如果後方教會的夾角太小其實沒辦法測兩點交會\n（查驗）如果放樣有誤差可以用平行位移但最多只能 1m\n森霸的圖都是放大 autocad1000 倍，其他都只有 100 倍，森霸的圖改動非常快有時候已經做下去但沒辦法再動了\n月眉只要注意信哥\n釘子怕敲到手可以用鉗子\n森霸誤差小於 1cm，月眉誤差小於 2cm\n\n# 111117 水準儀使用方法\n\nbehind | front 使用為 後方交會 流水點（間視，轉點） 前方交會\n按紐為上與下與 menu 跟 esc\n一定要後視完才能前視與間視\n改點號與改設定高程的中文翻譯是相反的\n用 gps 定位一要藍色上面那一條為測高程的基準\n\n# 1111129\n\n\n反光貼紙不用設到反光貼紙直接 RL 即可\n\n\n助手從前視變成到後視點的時候絕對不能動，（柏謙曾經犯下的錯誤）\n\n\ngps 弄到的錯誤\n\n\n如果測越遠的話高呈誤差越多就是儀器的垂直角有誤差\n\n\n組長說難怪間接高呈 s07 都會有誤差 (用全站儀測高呈) 都會有誤差\n\n\n先用座標定向 繼續 然後打點號與測點號高程然後按設定 然後中間會出現誤差 要先記住 然後之後會測量，因此會先要\n\n\n測量跟測站差在哪\n\n\n台語不行\n\n\n# 森霸電廠\n\n\n測一米線測 gsi gl 高呈 只需要先定平，先測一個控制點記高程然後去按 fnz 之後去 位移然後扣掉你想要的高程之後去加上你最初的高程\n\n\n座標定向 附測你自己想要的點就是要用座標定位先架好你現在的控制點之後然後去設站按座標定位現在全站儀架的控制點在哪邊然後設好點之後先看誤差多少然後在附冊下一點的時候要記得按偏移以誤差為主（組長是以這個座標定向下去測控制點的誤差）\n\n\n角度定向 對於測閉合導線時會用到的測站功能，先架好最初的點輸入好第一個控制點也量完儀器高也要在註記上按 2 之後，會出現角度定向要你後視的一個點也要把後視的點與菱鏡高給輸入進去之後再把註記輸入 2, 這樣就 ok 之後再輸入前視用測量然後測佔紀錄這樣就完成一個點的導線測量，兒繼續下一個點就是要由上一個前視的點下去架站再後視上個架站的控制點依此類推\n\n\n據吳大哥表示，測一個平面的東西如果太遠可以用大拇哥下去當垂直面點在點上如果測懸崖平面的點用此方法可以防止測到後面的東西，永翔測量的人會用一種金屬十字點下去取代大拇哥，貌似會更精準嗎？\n\n\n永翔放樣或是敲控制點的釘子的時候會用刷子清那邊的沙塵再放樣險得有專業性\n\n\n要出發記得要帶的東西\n\n對講機＊人數 ＋電池＊1 or 2\n雨鞋或是捕魚防水衣\n水泥釘盒＊2\n腳架＊3\n菱鏡＊2\ntape\n捲尺＊2 到 3\n竹子一打\n模板用鋼筋一打\n安全帽與安全背心\n工程圖與放樣的點號列表\n全站儀與小破魯 大破魯 反光貼紙\n簽單\n點包\n竹筷子一打\n筆\n麥克筆 立可白 ＊n\n噴漆紅白＊n\n警示帶一整捲\n木樁（可有可無）\n一箱水\n鎚子 一個輕一個重\n工程車證\n（森霸電廠）工程車要記得綁紅布兩邊都要（定誠會靠背）\n充電線\n漏斗 水線 手套 防塵頭套 剛頭鞋 毛巾\n\n\n\n記得寫簽單 跟寫工作日誌與問明天有沒有要進場與拍照現場施工\n\n放樣的時候要記得如果前後交的菱鏡越是對補準要記得條放到越後面的話\n要記得如果有簽簽單要問工程師明天的工作是否有需要進工地\n回來記得儀器要收 gsi 座標\n\n\n\n測量上反光貼紙原場的 20 元 一般路燈上面會貼的 5 元\n\n\nˇ3ˇ\n\n\n測量儀器如果垂直角有偏差相對誤差就會跟著偏差\n\n\n如果兩台儀器後方交會用同樣的點交會出來誤差差很多就代表有一台有著誤差需要校正\n\n\n當主測到現場首先要做的事情是要找控制點\n\n\n如果測量員被現場工程師跟民眾問說測量的地方有什麼不對盡量找理由搪塞 像是說當時測量員可能不是以測量所需要的面積下去講好說這塊面積為我的 又或者說對於同事測不對的點位可能是地殼變動之類總之要找理由不燃會顯德不專業\n\n\n打控制點盡量不要開紅點有時候因為反射會太亮導致交會不起來\n\n\n遇到儀器（已被同事摔到）交會起來特別慢才能交會出誤差出來\n\n\n遇到水準儀最後的誤差差 5cm 但用城市最後的結果為準的是因為平差距離相同互相抵銷所導致的\n\n\n\n# Run server\n# Generate static files\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"8398b42f070f2b400d41317ef353f01e","date":"2023-11-04T10:47:47.912Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"9c93d4d87cbed3b1aa980a2ee27a2957","title":"全聯生鮮人員の打工心得","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nhttps://i.imgur.com/ZKHlKFO.jpg\n# 前言\n做快一個月 (後來放棄，剩叫貨跟後台管理沒學，很吃速度跟細心（我的死穴）\n# 工作 sop 流程\n驗貨大概要 15 分鐘以內要驗完，早上第一件事情印價卡與折價卡貼折扣要 7:30 最慢要把蛋糕麵包貼完，補貨到驗單最慢要到 10:30（至少），每過一個星期要加速一次，上午下午都要各拍照 4 張整個都要拍照（蛋糕麵包調理魚肉加生鮮室清掃拍水溝 3 整體 1），一定要寫筆記（我的筆記本寫到爛掉），目前聽是干貨跟門市工作比較稍稍少一點點？（沒做過干貨不過要搬重物門市要推 pxpay…） （dcard 圖片為何這麼模糊啊……）4:30 有時候要叫賣試吃（這看每家店經理怎麼做，我家的全聯是放大聲公還是錄音擺在那客人要吃自己去拿，我待的店是要兩個人在那邊）\n檔案傳輸  機器：登入 (這個輸入一次機器就會記住了)  2. XXX 3.XXX  1.XXX\n 商品折扣  機器 ：登入  1. XXX 5. XXX 4.  XXX 1.XXX（不知道你看不看得懂……）\n冷凍櫃跟調理最上面一排每周一折價一次 6 折\n下面這張是我記性不好夾在手機殼里可以直接拿出來看呼出碼，\n蝦子早上 40 下午 41 晚上 42\n 透抽跟秋刀魚入庫冷凍要入庫表 3\nhttps://i.imgur.com/tlJULup.png\nhttps://i.imgur.com/AgAmHWo.png\nMore info: Writing\n# Run server\nh$ hexo serverMore info: Server\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"9c93d4d87cbed3b1aa980a2ee27a2957","date":"2023-11-04T10:40:17.228Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"c2fc05de7ce47073f1aaf0c41771db06","title":"印刷學徒の打工心得","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nhttps://i.imgur.com/ZKHlKFO.jpg\n# Quick Start\n# Create a new post\nh$ hexo new \"My New Post\"date: 2022-09-11 10:52:36\nMore info: Writing\n# Run server\nh$ hexo serverMore info: Server\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"c2fc05de7ce47073f1aaf0c41771db06","date":"2023-11-04T09:31:56.928Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"0e5db04114e38f2407373dc2db9c6d93","title":"房務員の打工心得","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n# Quick Start\ndate: 2023-02-12 16:02:36\n# Create a new post\nh$ hexo new \"My New Post\"More info: Writing\n# Run server\nh$ hexo serverMore info: Server\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"0e5db04114e38f2407373dc2db9c6d93","date":"2023-11-04T09:25:33.672Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"},{"id":"7b3b1dbeacc1173bdc701e39ee099afa","title":"景觀修復師の工作心得","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nhttps://i.imgur.com/ZKHlKFO.jpg\n# Quick Start\ndate: 2023-10-11 10:52:36\n# Create a new post\nh$ hexo new \"My New Post\"More info: Writing\n# Run server\nh$ hexo serverMore info: Server\n# Generate static files\nh$ hexo generateMore info: Generating\n# Deploy to remote sites\nh$ hexo deployMore info: Deployment\n","slug":"7b3b1dbeacc1173bdc701e39ee099afa","date":"2023-11-04T09:25:22.472Z","categories_index":"employment history","tags_index":"工作","author_index":"DILL"}]