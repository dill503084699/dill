<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Hexo • Posts by &#34;ai生成繪圖&#34; tag</title>
    <link href="http://example.com" />
    <updated>2023-11-04T14:21:04.977Z</updated>
    <category term="補丁" />
    <category term="2dlive" />
    <category term="讀書方法" />
    <category term="工作" />
    <category term="後端" />
    <category term="AI生成繪圖" />
    <category term="藝術品製作" />
    <category term="coding" />
    <category term="hexo 框架簡單介紹" />
    <entry>
        <id>http://example.com/post/index%207%20.html</id>
        <title>Stable-diffusion  AI 生成繪圖</title>
        <link rel="alternate" href="http://example.com/post/index%207%20.html"/>
        <content type="html">&lt;h2 id=&#34;自從看了用springboot建立一個小而美的blogb站視頻後就發現如今若是要建立一個博客可能相對於jpa來說mybatics更適合用來當作是入門程式小白的優先選擇可能不是執行效率最快但是至少開發來講沒這麼折騰燒腦&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自從看了用springboot建立一個小而美的blogb站視頻後就發現如今若是要建立一個博客可能相對於jpa來說mybatics更適合用來當作是入門程式小白的優先選擇可能不是執行效率最快但是至少開發來講沒這麼折騰燒腦&#34;&gt;#&lt;/a&gt; 自從看了 &amp;quot;用 springboot 建立一個小而美的 blog&amp;quot;B 站視頻後，就發現如今若是要建立一個博客，可能相對於 jpa 來說 mybatics 更適合用來當作是入門程式小白的優先選擇，可能不是執行效率最快，但是至少開發來講沒這麼折騰燒腦&lt;/h2&gt;
&lt;h2 id=&#34;tags-黑馬ssm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tags-黑馬ssm&#34;&gt;#&lt;/a&gt; tags: 黑馬 ssm&lt;/h2&gt;
&lt;h1 id=&#34;依賴注入方式-20230929&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依賴注入方式-20230929&#34;&gt;#&lt;/a&gt; 依賴注入方式 20230929&lt;/h1&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&#34;思考向一個類中傳遞數據的方法有幾種&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#思考向一個類中傳遞數據的方法有幾種&#34;&gt;#&lt;/a&gt; 思考：向一個類中傳遞數據的方法有幾種？&lt;/h2&gt;
&lt;h4 id=&#34;普通方法set方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#普通方法set方法&#34;&gt;#&lt;/a&gt; 普通方法 (set 方法)&lt;/h4&gt;
&lt;h4 id=&#34;構造方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#構造方法&#34;&gt;#&lt;/a&gt; 構造方法&lt;/h4&gt;
&lt;h2 id=&#34;思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢&#34;&gt;#&lt;/a&gt; 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;引用類型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;簡單類型（基本數據類型 string）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依賴注入方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setter 注入&lt;br&gt;
 - 簡單類型&lt;br&gt;
 - 引用類型&lt;/li&gt;
&lt;li&gt;構造器 注入&lt;br&gt;
 - 簡單類型&lt;br&gt;
 - 引用類型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;在 bean 中定義引用類型屬性並提供可訪問的 set 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;public class BookDaoImpl implements BookDao&amp;#123;
    private int connectionNumber;
    public void setConnectionNumber(int connectionNumber)&amp;#123;
        this.connecitonNumber = connectionNumber;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;配置中使用 property 標籤 value 屬性注入簡單類型數據&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;bean id =&amp;quot;bookDao&amp;quot; class=&amp;quot;com.itheima.dao.impl.BookDaoIml&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;connectionNumber&amp;quot; value=&amp;quot;10&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;構造器注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#構造器注入&#34;&gt;#&lt;/a&gt; 構造器注入&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;?xml vversion=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8?&amp;quot;
&amp;lt;bean xmlns=&amp;quot;htp://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&amp;quot;
        
        &amp;lt;bean id=&amp;quot;bookDao&amp;quot; class=&amp;quot;com.itheima.dao.iml.BookDaoIml&amp;quot;/&amp;gt;
        &amp;lt;bean id=&amp;quot;bookService&amp;quot; class=&amp;quot;com.itheima.service.impl.BookServiceImpl&amp;quot;
            &amp;lt;constructor-arg
        &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;構造器注入 — 引用類型（了解）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 bean 中定義引用類型屬性並提供可訪問的&lt;strong&gt;構造&lt;/strong&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;public class BookServiceImpl implements BookService&amp;#123;
    private BookDao bookDao;
    public BookServiceImpl(BookDao bookDao)&amp;#123;
        this.bookDao=bookDao;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;- 配置中使用&lt;strong&gt; constructor-arg&lt;/strong&gt; 標籤 ref 屬性注入引用類型對象&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;bean id=&amp;quot;bookService&amp;quot; class=&amp;quot;com.itheima.service.impl.BookServiceImpl&amp;quot;&amp;gt;
 &amp;lt;constructor-arg name=&amp;quot;bookDao&amp;quot; ref=&amp;quot;bookDao&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&amp;quot;bookDao&amp;quot; class=&amp;quot;com.itheima.dao.impl.BookDaoImpl&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;構造器注入-簡單類型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#構造器注入-簡單類型&#34;&gt;#&lt;/a&gt; 構造器注入 -- 簡單類型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 bean 中定義引用類型屬性並提供可訪問的 set 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;public class BookDaoImpl implements BookDao&amp;#123;
    private int connectionNumber;
    public void setConnectionNumber(int connectionNumber)&amp;#123;
        this.connectionNumber =connectionNumber;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;bean id=&amp;quot;bookDao&amp;quot; class=&amp;quot;com.itheima.dao.impl.BookDaoImpl&amp;quot;&amp;gt;
    &amp;lt;constructor-arg name=&amp;quot;connectionNumber&amp;quot; value=&amp;quot;10&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;構造器注入-參數適配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#構造器注入-參數適配&#34;&gt;#&lt;/a&gt; 構造器注入 — 參數適配&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;bean id=&amp;quot;bookDao&amp;quot; class=&amp;quot;com.itheima.dao.iml.BookDaoImpl&amp;quot;&amp;gt;
    &amp;lt;constructor-arg type=&amp;quot;int&amp;quot;value=&amp;quot;10&amp;quot;/&amp;gt;
    &amp;lt;consturctor-arg type=&amp;quot;java.lang.String&amp;quot;value=&amp;quot;mysql&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;bean id=&amp;quot;bookDao&amp;quot; class=&amp;quot;com.tieima.dao.impl.BookDaoImpl&amp;quot;&amp;gt;
   &amp;lt;constructor-arg index=&amp;quot;0&amp;quot; value=&amp;quot;10&amp;quot;/&amp;gt;
   &amp;lt;constructor-arg index=&amp;quot;1&amp;quot; value=&amp;quot;mysql&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;依賴注入方式選擇&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現&lt;/li&gt;
&lt;li&gt;可選依賴使用 setter 注入進行，靈活性強&lt;/li&gt;
&lt;li&gt;spring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹&lt;/li&gt;
&lt;li&gt;如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入&lt;/li&gt;
&lt;li&gt;實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自己開發的模塊推薦使用 setter 注入&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;小結&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小結&#34;&gt;#&lt;/a&gt; 小結&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;依賴注入方式
&lt;ul&gt;
&lt;li&gt;setter 注入
&lt;ul&gt;
&lt;li&gt;簡單類型&lt;/li&gt;
&lt;li&gt;引用類型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;構造器注入
&lt;ul&gt;
&lt;li&gt;簡單類型&lt;/li&gt;
&lt;li&gt;引用類型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依賴注入方式選擇
&lt;ul&gt;
&lt;li&gt;建議使用 setter 注入&lt;/li&gt;
&lt;li&gt;第三方技術根據情況選擇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;依賴自動裝配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依賴自動裝配&#34;&gt;#&lt;/a&gt; 依賴自動裝配&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;bean id=&amp;quot;bookDao &amp;quot; class=&amp;quot;com.itheima.dao.impl.BookDaoImpl&amp;quot;/&amp;gt;
&amp;lt;bean id=&amp;quot;bookService&amp;quot; class=&amp;quot;com.itheima.service.impl.BookServiceImpl&amp;quot; autowire=&amp;quot;byType&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;依賴自動裝配特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依賴自動裝配特征&#34;&gt;#&lt;/a&gt; 依賴自動裝配特征&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;自動裝配用於引用類型依賴注入，不能對簡單類型進行操作&lt;/li&gt;
&lt;li&gt;使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用&lt;/li&gt;
&lt;li&gt;使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合&lt;/li&gt;
&lt;li&gt;自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;小結-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小結-2&#34;&gt;#&lt;/a&gt; 小結&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;自動裝配概念&lt;/li&gt;
&lt;li&gt;自動裝配類型&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;注入集合對象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入集合對象&#34;&gt;#&lt;/a&gt; 注入集合對象&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注入數組對象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;數組&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;property name=&amp;quot;array&amp;quot;&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;value&amp;gt;100&amp;lt;/value&amp;gt;
        &amp;lt;value&amp;gt;200&amp;lt;/value&amp;gt;
        &amp;lt;value&amp;gt;300&amp;lt;/value&amp;gt;
    &amp;lt;/array&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;property name=&amp;quot;list&amp;quot;&amp;gt;
    &amp;lt;list&amp;gt;
        &amp;lt;value&amp;gt;itcast&amp;lt;/value&amp;gt;
        &amp;lt;value&amp;gt;itheima&amp;lt;/value&amp;gt;
        &amp;lt;value&amp;gt;boxuegu&amp;lt;/value&amp;gt;
    &amp;lt;/list&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;property name=&amp;quot;set&amp;quot;&amp;gt;
    &amp;lt;set&amp;gt;
        &amp;lt;value&amp;gt;itcast&amp;lt;/value&amp;gt;
        &amp;lt;value&amp;gt;itheima&amp;lt;/value&amp;gt;
        &amp;lt;value&amp;gt;boxuegu&amp;lt;/value&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;property name=&amp;quot;map&amp;quot;&amp;gt;
    &amp;lt;map&amp;gt;
        &amp;lt;entry key=&amp;quot;country&amp;quot; value=&amp;quot;china&amp;quot;/&amp;gt;
        &amp;lt;entry key=&amp;quot;province&amp;quot; value=&amp;quot;henan&amp;quot;/&amp;gt;
        &amp;lt;entry key=&amp;quot;city&amp;quot; value=&amp;quot;kaifeng&amp;quot;/&amp;gt;
    &amp;lt;/map&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;property name=&amp;quot;properties&amp;quot;&amp;gt;
    &amp;lt;props&amp;gt;
        &amp;lt;prop key=&amp;quot;country&amp;quot;&amp;gt;china&amp;lt;/prop&amp;gt;
        &amp;lt;prop key=&amp;quot;province&amp;quot;&amp;gt;henan&amp;lt;/prop&amp;gt;
        &amp;lt;prop key=&amp;quot;city&amp;quot;&amp;gt;kaifeng&amp;lt;/prop&amp;gt;
    &amp;lt;/props&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;小結-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小結-3&#34;&gt;#&lt;/a&gt; 小結&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;注入集合&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;案例數據源對象管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#案例數據源對象管理&#34;&gt;#&lt;/a&gt; 案例：數據源對象管理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第三方資源配置管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;導入 druid 座標&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
    &amp;lt;artifacId&amp;gt;druid&amp;lt;/artifacId&amp;gt;
    &amp;lt;version&amp;gt;1.1.16&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;配置數據源對象作為 spring 管理的 bean&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;com.alibaba.druid.poo1.DruidDataSource&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;com.mysql.jdbc.Driver&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://127.0.0.1:3306/spring_db&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;小結-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小結-4&#34;&gt;#&lt;/a&gt; 小結&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;spring 管理第三方資源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DruidDataSource&lt;/li&gt;
&lt;li&gt;ComboPooledDataSource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;加載properties文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加載properties文件&#34;&gt;#&lt;/a&gt; 加載 properties 文件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;不加載系統屬性&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;context:property-placeholder location=&amp;quot;jdbc.properties&amp;quot; system-properties-mode=&amp;quot;NEVER&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;加載多個 properties 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;context:property-placeholder location=&amp;quot;jdbc.properties,msg.properties&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;加載所以 properties 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;context:property-placeholder locaiton=&amp;quot;*.properties&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;加載 properties 文件標準格式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;context:property-placeholder location=&amp;quot;classpath:*.properties&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;從類路徑或 jar 包中搜索並加載 properties 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;context:property-placeholder location=&amp;quot;classpath*:*.properties&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;小結-5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小結-5&#34;&gt;#&lt;/a&gt; 小結&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;加載 properties 配置文件信息&lt;/li&gt;
&lt;li&gt;開啟命名空間方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#容器&#34;&gt;#&lt;/a&gt; 容器&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;創建容器&lt;/li&gt;
&lt;li&gt;獲取 bean&lt;/li&gt;
&lt;li&gt;容器類層次結構&lt;/li&gt;
&lt;li&gt;beanFactory&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;創建容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#創建容器&#34;&gt;#&lt;/a&gt; 創建容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方式一：類路徑加載配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;ApplicationContext ctx= new ClassPathXmlApplicationContext(&amp;quot;applicationContext.xml&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;方式二：使用 bean 名稱獲取並指定類型&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;ApplicationContext ctx= new FileSystemXmlApplicationContext(&amp;quot;D://applicationContext.xml&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;加載多個配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;ApplicationContext ctx= new ClassPathXmlApplicationContext(&amp;quot;bean1.xml&amp;quot;,&amp;quot;bean2.xml&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;獲取bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#獲取bean&#34;&gt;#&lt;/a&gt; 獲取 bean&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;方式一：使用 bean 名稱獲取&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;BookDao bookDao=(BookDao)ctx.getBean(&amp;quot;bookDao&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;方式二：使用 bean 名稱獲取並指定類型&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;BookDao bookDao = ctx.getBean(&amp;quot;bookDao&amp;quot;, BookDao.class);

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;方法三：使用 bean 類型獲取&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;BookDao bookDao= ctx.getBean(BookDao.class);

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;核心容器總結&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#核心容器總結&#34;&gt;#&lt;/a&gt; 核心容器總結&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;容器相關&lt;/li&gt;
&lt;li&gt;bean 相關&lt;/li&gt;
&lt;li&gt;依賴注入相關&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;BeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載&lt;/li&gt;
&lt;li&gt;applicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載&lt;/li&gt;
&lt;li&gt;applicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能&lt;/li&gt;
&lt;li&gt;applicationContext 接口常用初始化類
&lt;ul&gt;
&lt;li&gt;ClassPathXmlApplicationContext&lt;/li&gt;
&lt;li&gt;FileSystemXmlApplicationContext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java=&#34;&gt;&amp;lt;bean
    id=&amp;quot;bookDao&amp;quot;
    name=&amp;quot;dao bookDaoImpl daoImpl&amp;quot;
    class=&amp;quot;com.itheima.dao.impl.BookDaoImpl&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;中央處理器(cpu)&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;英文&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;數據記憶體；資料記憶體&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;data memory&lt;/td&gt;
&lt;td&gt;CPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;:----:&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- ![](https://i.imgur.com/SL7B0Pp.png)

# register



![](https://i.imgur.com/4w1KkJW.gif)

 --&gt;
&lt;h1 id=&#34;jump-指令-細分種類&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jump-指令-細分種類&#34;&gt;#&lt;/a&gt; jump 指令 細分種類&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;暫存器種類&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;資料暫存器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。&lt;/td&gt;
&lt;td&gt;功能&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;:----:&lt;/td&gt;
&lt;td&gt;:----:&lt;/td&gt;
&lt;td&gt;:---------:&lt;/td&gt;
&lt;td&gt;:----:&lt;/td&gt;
&lt;td&gt;:-------:&lt;/td&gt;
&lt;td&gt;--------&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2yW1q3o.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;講解-register-與-verilog-程式結構&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#講解-register-與-verilog-程式結構&#34;&gt;#&lt;/a&gt; 講解 REGISTER 與 verilog 程式結構&lt;/h1&gt;
&lt;blockquote&gt;&lt;span class=&#34;custom-blockquote-svg&#34;&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; data-reactroot=&#34;&#34;&gt;
&lt;path fill=&#34;&#34; d=&#34;M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z&#34; undefined=&#34;1&#34;&gt;&lt;/path&gt;
&lt;path fill=&#34;&#34; d=&#34;M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z&#34; undefined=&#34;1&#34;&gt;&lt;/path&gt;
&lt;path fill=&#34;&#34; d=&#34;M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z&#34; undefined=&#34;1&#34;&gt;&lt;/path&gt;
&lt;path stroke-linejoin=&#34;round&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34; stroke=&#34;&#34; d=&#34;M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5&#34;&gt;&lt;/path&gt;
&lt;path stroke-linejoin=&#34;round&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34; stroke=&#34;&#34; d=&#34;M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5&#34;&gt;&lt;/path&gt;
&lt;path stroke-linejoin=&#34;round&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34; stroke=&#34;&#34; d=&#34;M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z&#34;&gt;&lt;/path&gt;
&lt;path stroke-linejoin=&#34;round&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34; stroke=&#34;&#34; d=&#34;M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z&#34;&gt;&lt;/path&gt;
&lt;/svg&gt;
&lt;/span&gt;&lt;p&gt;[name=bill503084699]&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/oTlKj0Y.png&#34; alt=&#34;&#34;&gt;&lt;br&gt;
2. 介紹以 Register 的架構所呈現出來的圖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  用第三組的圖去做詮釋
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/5RzVbCZ.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;定義接腳&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定義接腳&#34;&gt;#&lt;/a&gt; 定義接腳&lt;/h2&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;依照慣例我們先把模組名稱定義出來，接下來就是小括號 &amp;quot;埠列信號&amp;quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來&lt;/p&gt;
&lt;p&gt;然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-verilog=&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;相關圖片比較 (比較知道腳位寫在哪)&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://i.imgur.com/1td3mjj.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://i.imgur.com/Mb9roNA.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td colspan=&#34;2&#34;&gt;&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;:----:&lt;/td&gt;
&lt;td&gt;:----:&lt;/td&gt;
&lt;td&gt;:---------:&lt;/td&gt;
&lt;td&gt;:----:&lt;/td&gt;
&lt;td&gt;:-------:&lt;/td&gt;
&lt;td&gt;--------&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;設定register-內定的假設式子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#設定register-內定的假設式子&#34;&gt;#&lt;/a&gt; 設定 register 內定的假設式子&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-verilog=&#34;&gt;reg[31:0]regfile[31:0];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;||||&lt;br&gt;
5. kim 總結 32 個抽屜 裏頭有 32 個格&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-verilog=&#34;&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;補充下面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#補充下面&#34;&gt;#&lt;/a&gt; 補充下面&lt;/h4&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;clock always 的式子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-verilog=&#34;&gt;always@(posedge clk)begin  
    if(reset==1&#39;b1)begin  
        if((we==1&#39;b1)&amp;amp;&amp;amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送
        regfile[wb_addr]&amp;lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方
    end
end
        
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;補充-下面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#補充-下面&#34;&gt;#&lt;/a&gt; 補充 下面&lt;/h4&gt;
&lt;p&gt;謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數&lt;br&gt;
不是 bit 表示&lt;br&gt;
 willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用&lt;/p&gt;
&lt;p&gt;結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改&lt;br&gt;
然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此&lt;/p&gt;
&lt;p&gt;當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-verilog=&#34;&gt;`define regcomb 5 // comb為5
`define regoff &amp;#123;`regcomb&amp;#123;`off&amp;#125;&amp;#125;
`define offword &amp;#123;32&amp;#123;`off&amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;clk  將 reset=1’b1 改成！reset 的式子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-verilog=&#34;&gt;
        
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;if (reset=1’b1) reset 拉起來的時候去做重製&lt;/li&gt;
&lt;li&gt;if (!reset)     reset 放下來的時候去做重製&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最終呈現 register 電路圖&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/yYUHqF1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-verilog=&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;補充-下面-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#補充-下面-2&#34;&gt;#&lt;/a&gt; 補充 下面&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HRXvRxw.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#參考資料&#34;&gt;#&lt;/a&gt; 參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://half-engr.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BF%85%E5%AD%B8%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98-hackmd-notion/&#34;&gt;工程師必學電子筆記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://koshizuow.gitbook.io/compilerbook/machine_code_assembler/cpu_memory&#34;&gt;CPU 與記憶體&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/457620455&#34;&gt;自己動手寫 RISC-V CPU -（4）增加分支預測功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-verilog=&#34;&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="AI生成繪圖" />
        <updated>2023-11-04T14:21:04.977Z</updated>
    </entry>
</feed>
