{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "sdf",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/post/index%208.html",
            "url": "http://example.com/post/index%208.html",
            "title": "皮革工廠化驗室助理之工作心得",
            "date_published": "2023-11-04T18:01:47.129Z",
            "content_html": "<p>高中畢業的第一份工作</p>\n<p>工作環境：☆ ☆ ☆ ☆ ☆</p>\n<p>工作難度：★ ★ ★ ☆ ☆</p>\n<p>工作速度：★ ★ ☆ ☆ ☆</p>\n<h2 id=\"工作量\"><a class=\"markdownIt-Anchor\" href=\"#工作量\">#</a> 工作量  ：★ ☆ ☆ ☆ ☆</h2>\n<h2 id=\"tags-黑馬ssm\"><a class=\"markdownIt-Anchor\" href=\"#tags-黑馬ssm\">#</a> tags: 黑馬 ssm</h2>\n<h1 id=\"依賴注入方式-20230929\"><a class=\"markdownIt-Anchor\" href=\"#依賴注入方式-20230929\">#</a> 依賴注入方式 20230929</h1>\n<p>[TOC]</p>\n<h2 id=\"思考向一個類中傳遞數據的方法有幾種\"><a class=\"markdownIt-Anchor\" href=\"#思考向一個類中傳遞數據的方法有幾種\">#</a> 思考：向一個類中傳遞數據的方法有幾種？</h2>\n<h4 id=\"普通方法set方法\"><a class=\"markdownIt-Anchor\" href=\"#普通方法set方法\">#</a> 普通方法 (set 方法)</h4>\n<h4 id=\"構造方法\"><a class=\"markdownIt-Anchor\" href=\"#構造方法\">#</a> 構造方法</h4>\n<h2 id=\"思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢\"><a class=\"markdownIt-Anchor\" href=\"#思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢\">#</a> 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？</h2>\n<ul>\n<li>\n<p>引用類型</p>\n</li>\n<li>\n<p>簡單類型（基本數據類型 string）</p>\n</li>\n<li>\n<p>依賴注入方式</p>\n<ul>\n<li>setter 注入<br>\n - 簡單類型<br>\n - 引用類型</li>\n<li>構造器 注入<br>\n - 簡單類型<br>\n - 引用類型</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的 set 方法</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n<ul>\n<li>配置中使用 property 標籤 value 屬性注入簡單類型數據</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<hr>\n<h1 id=\"構造器注入\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入\">#</a> 構造器注入</h1>\n<pre><code class=\"language-java=\">&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n</code></pre>\n<ul>\n<li>\n<p>構造器注入 — 引用類型（了解）</p>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的<strong>構造</strong>方法</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n</code></pre>\n<p>- 配置中使用<strong> constructor-arg</strong> 標籤 ref 屬性注入引用類型對象</p>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n</code></pre>\n<h2 id=\"構造器注入-簡單類型\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入-簡單類型\">#</a> 構造器注入 -- 簡單類型</h2>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的 set 方法</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n</code></pre>\n<ul>\n<li>配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h2 id=\"構造器注入-參數適配\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入-參數適配\">#</a> 構造器注入 — 參數適配</h2>\n<ul>\n<li>配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n</code></pre>\n<ul>\n<li>配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>依賴注入方式選擇</p>\n<ol>\n<li>強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現</li>\n<li>可選依賴使用 setter 注入進行，靈活性強</li>\n<li>spring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹</li>\n<li>如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入</li>\n<li>實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入</li>\n<li><strong>自己開發的模塊推薦使用 setter 注入</strong></li>\n</ol>\n<h3 id=\"小結\"><a class=\"markdownIt-Anchor\" href=\"#小結\">#</a> 小結</h3>\n<ol>\n<li>依賴注入方式\n<ul>\n<li>setter 注入\n<ul>\n<li>簡單類型</li>\n<li>引用類型</li>\n</ul>\n</li>\n<li>構造器注入\n<ul>\n<li>簡單類型</li>\n<li>引用類型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>依賴注入方式選擇\n<ul>\n<li>建議使用 setter 注入</li>\n<li>第三方技術根據情況選擇</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"依賴自動裝配\"><a class=\"markdownIt-Anchor\" href=\"#依賴自動裝配\">#</a> 依賴自動裝配</h1>\n<ul>\n<li>配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n</code></pre>\n<h2 id=\"依賴自動裝配特征\"><a class=\"markdownIt-Anchor\" href=\"#依賴自動裝配特征\">#</a> 依賴自動裝配特征</h2>\n<ul>\n<li>自動裝配用於引用類型依賴注入，不能對簡單類型進行操作</li>\n<li>使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用</li>\n<li>使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合</li>\n<li>自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效</li>\n</ul>\n<h3 id=\"小結-2\"><a class=\"markdownIt-Anchor\" href=\"#小結-2\">#</a> 小結</h3>\n<ol>\n<li>自動裝配概念</li>\n<li>自動裝配類型</li>\n</ol>\n<hr>\n<h1 id=\"注入集合對象\"><a class=\"markdownIt-Anchor\" href=\"#注入集合對象\">#</a> 注入集合對象</h1>\n<ul>\n<li>\n<p>注入數組對象</p>\n<ul>\n<li>數組</li>\n<li>list</li>\n<li>set</li>\n<li>map</li>\n<li>properties</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n</code></pre>\n<h3 id=\"小結-3\"><a class=\"markdownIt-Anchor\" href=\"#小結-3\">#</a> 小結</h3>\n<ol>\n<li>注入集合</li>\n</ol>\n<h1 id=\"案例數據源對象管理\"><a class=\"markdownIt-Anchor\" href=\"#案例數據源對象管理\">#</a> 案例：數據源對象管理</h1>\n<ul>\n<li>\n<p>第三方資源配置管理</p>\n</li>\n<li>\n<p>導入 druid 座標</p>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n</code></pre>\n<ul>\n<li>配置數據源對象作為 spring 管理的 bean</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h3 id=\"小結-4\"><a class=\"markdownIt-Anchor\" href=\"#小結-4\">#</a> 小結</h3>\n<ol>\n<li>\n<p>spring 管理第三方資源</p>\n<ul>\n<li>DruidDataSource</li>\n<li>ComboPooledDataSource</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=\"加載properties文件\"><a class=\"markdownIt-Anchor\" href=\"#加載properties文件\">#</a> 加載 properties 文件</h1>\n<ul>\n<li>不加載系統屬性</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n</code></pre>\n<ul>\n<li>加載多個 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n</code></pre>\n<ul>\n<li>加載所以 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n</code></pre>\n<ul>\n<li>加載 properties 文件標準格式</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n</code></pre>\n<ul>\n<li>從類路徑或 jar 包中搜索並加載 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n</code></pre>\n<h3 id=\"小結-5\"><a class=\"markdownIt-Anchor\" href=\"#小結-5\">#</a> 小結</h3>\n<ol>\n<li>加載 properties 配置文件信息</li>\n<li>開啟命名空間方式</li>\n</ol>\n<h1 id=\"容器\"><a class=\"markdownIt-Anchor\" href=\"#容器\">#</a> 容器</h1>\n<ol>\n<li>創建容器</li>\n<li>獲取 bean</li>\n<li>容器類層次結構</li>\n<li>beanFactory</li>\n</ol>\n<h2 id=\"創建容器\"><a class=\"markdownIt-Anchor\" href=\"#創建容器\">#</a> 創建容器</h2>\n<ul>\n<li>方式一：類路徑加載配置文件</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n</code></pre>\n<ul>\n<li>方式二：使用 bean 名稱獲取並指定類型</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n</code></pre>\n<ul>\n<li>加載多個配置文件</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n</code></pre>\n<h2 id=\"獲取bean\"><a class=\"markdownIt-Anchor\" href=\"#獲取bean\">#</a> 獲取 bean</h2>\n<ul>\n<li>方式一：使用 bean 名稱獲取</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n</code></pre>\n<ul>\n<li>方式二：使用 bean 名稱獲取並指定類型</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n</code></pre>\n<ul>\n<li>方法三：使用 bean 類型獲取</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao= ctx.getBean(BookDao.class);\n\n</code></pre>\n<h1 id=\"核心容器總結\"><a class=\"markdownIt-Anchor\" href=\"#核心容器總結\">#</a> 核心容器總結</h1>\n<ol>\n<li>容器相關</li>\n<li>bean 相關</li>\n<li>依賴注入相關</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>BeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載</li>\n<li>applicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載</li>\n<li>applicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能</li>\n<li>applicationContext 接口常用初始化類\n<ul>\n<li>ClassPathXmlApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th><code>中央處理器(cpu)</code></th>\n<th style=\"text-align:center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>數據記憶體；資料記憶體</td>\n<td style=\"text-align:center\">data memory</td>\n<td>CPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置</td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>----</td>\n</tr>\n</tbody>\n</table>\n<!-- ![](https://i.imgur.com/SL7B0Pp.png)\n\n# register\n\n\n\n![](https://i.imgur.com/4w1KkJW.gif)\n\n -->\n<h1 id=\"jump-指令-細分種類\"><a class=\"markdownIt-Anchor\" href=\"#jump-指令-細分種類\">#</a> jump 指令 細分種類</h1>\n<table>\n<thead>\n<tr>\n<th><code>暫存器種類</code></th>\n<th style=\"text-align:center\"><code>Function</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>資料暫存器</td>\n<td style=\"text-align:center\">用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。</td>\n<td>功能</td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>:----:</td>\n<td>:---------:</td>\n<td>:----:</td>\n<td>:-------:</td>\n<td>--------</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li></li>\n</ul>\n<p><img src=\"https://i.imgur.com/2yW1q3o.png\" alt=\"\"></p>\n<h1 id=\"講解-register-與-verilog-程式結構\"><a class=\"markdownIt-Anchor\" href=\"#講解-register-與-verilog-程式結構\">#</a> 講解 REGISTER 與 verilog 程式結構</h1>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[name=bill503084699]</p></blockquote>\n<ol>\n<li></li>\n</ol>\n<p><img src=\"https://i.imgur.com/oTlKj0Y.png\" alt=\"\"><br>\n2. 介紹以 Register 的架構所呈現出來的圖</p>\n<pre><code>  用第三組的圖去做詮釋\n</code></pre>\n<p><img src=\"https://i.imgur.com/5RzVbCZ.jpg\" alt=\"\"></p>\n<h2 id=\"定義接腳\"><a class=\"markdownIt-Anchor\" href=\"#定義接腳\">#</a> 定義接腳</h2>\n<ol start=\"3\">\n<li>\n<p>依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來</p>\n<p>然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先</p>\n</li>\n</ol>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<ul>\n<li>前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間</li>\n</ul>\n<ol start=\"4\">\n<li>相關圖片比較 (比較知道腳位寫在哪)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td><img src=\"https://i.imgur.com/1td3mjj.jpg\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"https://i.imgur.com/Mb9roNA.jpg\" alt=\"\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>:----:</td>\n<td>:---------:</td>\n<td>:----:</td>\n<td>:-------:</td>\n<td>--------</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"設定register-內定的假設式子\"><a class=\"markdownIt-Anchor\" href=\"#設定register-內定的假設式子\">#</a> 設定 register 內定的假設式子</h2>\n<pre><code class=\"language-verilog=\">reg[31:0]regfile[31:0];\n</code></pre>\n<p>||||<br>\n5. kim 總結 32 個抽屜 裏頭有 32 個格</p>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<ul>\n<li></li>\n</ul>\n<hr>\n<h4 id=\"補充下面\"><a class=\"markdownIt-Anchor\" href=\"#補充下面\">#</a> 補充下面</h4>\n<hr>\n<hr>\n<p>clock always 的式子</p>\n<pre><code class=\"language-verilog=\">always@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n</code></pre>\n<hr>\n<h4 id=\"補充-下面\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面\">#</a> 補充 下面</h4>\n<p>謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數<br>\n不是 bit 表示<br>\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用</p>\n<p>結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改<br>\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此</p>\n<p>當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0</p>\n<pre><code class=\"language-verilog=\">`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n</code></pre>\n<hr>\n<p>clk  將 reset=1’b1 改成！reset 的式子</p>\n<pre><code class=\"language-verilog=\">\n        \n</code></pre>\n<hr>\n<ul>\n<li>if (reset=1’b1) reset 拉起來的時候去做重製</li>\n<li>if (!reset)     reset 放下來的時候去做重製</li>\n</ul>\n<p>最終呈現 register 電路圖</p>\n<p><img src=\"https://i.imgur.com/yYUHqF1.png\" alt=\"\"></p>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<hr>\n<h4 id=\"補充-下面-2\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面-2\">#</a> 補充 下面</h4>\n<p><img src=\"https://i.imgur.com/HRXvRxw.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"參考資料\"><a class=\"markdownIt-Anchor\" href=\"#參考資料\">#</a> 參考資料</h2>\n<ul>\n<li><a href=\"https://half-engr.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BF%85%E5%AD%B8%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98-hackmd-notion/\">工程師必學電子筆記</a></li>\n<li><a href=\"https://koshizuow.gitbook.io/compilerbook/machine_code_assembler/cpu_memory\">CPU 與記憶體</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/457620455\">自己動手寫 RISC-V CPU -（4）增加分支預測功能</a></li>\n</ul>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "工作"
            ]
        },
        {
            "id": "http://example.com/post/index%207%20.html",
            "url": "http://example.com/post/index%207%20.html",
            "title": "Stable-diffusion  AI 生成繪圖",
            "date_published": "2023-11-04T14:21:04.977Z",
            "content_html": "<h2 id=\"自從看了用springboot建立一個小而美的blogb站視頻後就發現如今若是要建立一個博客可能相對於jpa來說mybatics更適合用來當作是入門程式小白的優先選擇可能不是執行效率最快但是至少開發來講沒這麼折騰燒腦\"><a class=\"markdownIt-Anchor\" href=\"#自從看了用springboot建立一個小而美的blogb站視頻後就發現如今若是要建立一個博客可能相對於jpa來說mybatics更適合用來當作是入門程式小白的優先選擇可能不是執行效率最快但是至少開發來講沒這麼折騰燒腦\">#</a> 自從看了 &quot;用 springboot 建立一個小而美的 blog&quot;B 站視頻後，就發現如今若是要建立一個博客，可能相對於 jpa 來說 mybatics 更適合用來當作是入門程式小白的優先選擇，可能不是執行效率最快，但是至少開發來講沒這麼折騰燒腦</h2>\n<h2 id=\"tags-黑馬ssm\"><a class=\"markdownIt-Anchor\" href=\"#tags-黑馬ssm\">#</a> tags: 黑馬 ssm</h2>\n<h1 id=\"依賴注入方式-20230929\"><a class=\"markdownIt-Anchor\" href=\"#依賴注入方式-20230929\">#</a> 依賴注入方式 20230929</h1>\n<p>[TOC]</p>\n<h2 id=\"思考向一個類中傳遞數據的方法有幾種\"><a class=\"markdownIt-Anchor\" href=\"#思考向一個類中傳遞數據的方法有幾種\">#</a> 思考：向一個類中傳遞數據的方法有幾種？</h2>\n<h4 id=\"普通方法set方法\"><a class=\"markdownIt-Anchor\" href=\"#普通方法set方法\">#</a> 普通方法 (set 方法)</h4>\n<h4 id=\"構造方法\"><a class=\"markdownIt-Anchor\" href=\"#構造方法\">#</a> 構造方法</h4>\n<h2 id=\"思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢\"><a class=\"markdownIt-Anchor\" href=\"#思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢\">#</a> 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？</h2>\n<ul>\n<li>\n<p>引用類型</p>\n</li>\n<li>\n<p>簡單類型（基本數據類型 string）</p>\n</li>\n<li>\n<p>依賴注入方式</p>\n<ul>\n<li>setter 注入<br>\n - 簡單類型<br>\n - 引用類型</li>\n<li>構造器 注入<br>\n - 簡單類型<br>\n - 引用類型</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的 set 方法</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n<ul>\n<li>配置中使用 property 標籤 value 屬性注入簡單類型數據</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<hr>\n<h1 id=\"構造器注入\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入\">#</a> 構造器注入</h1>\n<pre><code class=\"language-java=\">&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n</code></pre>\n<ul>\n<li>\n<p>構造器注入 — 引用類型（了解）</p>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的<strong>構造</strong>方法</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n</code></pre>\n<p>- 配置中使用<strong> constructor-arg</strong> 標籤 ref 屬性注入引用類型對象</p>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n</code></pre>\n<h2 id=\"構造器注入-簡單類型\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入-簡單類型\">#</a> 構造器注入 -- 簡單類型</h2>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的 set 方法</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n</code></pre>\n<ul>\n<li>配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h2 id=\"構造器注入-參數適配\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入-參數適配\">#</a> 構造器注入 — 參數適配</h2>\n<ul>\n<li>配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n</code></pre>\n<ul>\n<li>配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>依賴注入方式選擇</p>\n<ol>\n<li>強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現</li>\n<li>可選依賴使用 setter 注入進行，靈活性強</li>\n<li>spring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹</li>\n<li>如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入</li>\n<li>實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入</li>\n<li><strong>自己開發的模塊推薦使用 setter 注入</strong></li>\n</ol>\n<h3 id=\"小結\"><a class=\"markdownIt-Anchor\" href=\"#小結\">#</a> 小結</h3>\n<ol>\n<li>依賴注入方式\n<ul>\n<li>setter 注入\n<ul>\n<li>簡單類型</li>\n<li>引用類型</li>\n</ul>\n</li>\n<li>構造器注入\n<ul>\n<li>簡單類型</li>\n<li>引用類型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>依賴注入方式選擇\n<ul>\n<li>建議使用 setter 注入</li>\n<li>第三方技術根據情況選擇</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"依賴自動裝配\"><a class=\"markdownIt-Anchor\" href=\"#依賴自動裝配\">#</a> 依賴自動裝配</h1>\n<ul>\n<li>配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n</code></pre>\n<h2 id=\"依賴自動裝配特征\"><a class=\"markdownIt-Anchor\" href=\"#依賴自動裝配特征\">#</a> 依賴自動裝配特征</h2>\n<ul>\n<li>自動裝配用於引用類型依賴注入，不能對簡單類型進行操作</li>\n<li>使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用</li>\n<li>使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合</li>\n<li>自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效</li>\n</ul>\n<h3 id=\"小結-2\"><a class=\"markdownIt-Anchor\" href=\"#小結-2\">#</a> 小結</h3>\n<ol>\n<li>自動裝配概念</li>\n<li>自動裝配類型</li>\n</ol>\n<hr>\n<h1 id=\"注入集合對象\"><a class=\"markdownIt-Anchor\" href=\"#注入集合對象\">#</a> 注入集合對象</h1>\n<ul>\n<li>\n<p>注入數組對象</p>\n<ul>\n<li>數組</li>\n<li>list</li>\n<li>set</li>\n<li>map</li>\n<li>properties</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n</code></pre>\n<h3 id=\"小結-3\"><a class=\"markdownIt-Anchor\" href=\"#小結-3\">#</a> 小結</h3>\n<ol>\n<li>注入集合</li>\n</ol>\n<h1 id=\"案例數據源對象管理\"><a class=\"markdownIt-Anchor\" href=\"#案例數據源對象管理\">#</a> 案例：數據源對象管理</h1>\n<ul>\n<li>\n<p>第三方資源配置管理</p>\n</li>\n<li>\n<p>導入 druid 座標</p>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n</code></pre>\n<ul>\n<li>配置數據源對象作為 spring 管理的 bean</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h3 id=\"小結-4\"><a class=\"markdownIt-Anchor\" href=\"#小結-4\">#</a> 小結</h3>\n<ol>\n<li>\n<p>spring 管理第三方資源</p>\n<ul>\n<li>DruidDataSource</li>\n<li>ComboPooledDataSource</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=\"加載properties文件\"><a class=\"markdownIt-Anchor\" href=\"#加載properties文件\">#</a> 加載 properties 文件</h1>\n<ul>\n<li>不加載系統屬性</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n</code></pre>\n<ul>\n<li>加載多個 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n</code></pre>\n<ul>\n<li>加載所以 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n</code></pre>\n<ul>\n<li>加載 properties 文件標準格式</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n</code></pre>\n<ul>\n<li>從類路徑或 jar 包中搜索並加載 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n</code></pre>\n<h3 id=\"小結-5\"><a class=\"markdownIt-Anchor\" href=\"#小結-5\">#</a> 小結</h3>\n<ol>\n<li>加載 properties 配置文件信息</li>\n<li>開啟命名空間方式</li>\n</ol>\n<h1 id=\"容器\"><a class=\"markdownIt-Anchor\" href=\"#容器\">#</a> 容器</h1>\n<ol>\n<li>創建容器</li>\n<li>獲取 bean</li>\n<li>容器類層次結構</li>\n<li>beanFactory</li>\n</ol>\n<h2 id=\"創建容器\"><a class=\"markdownIt-Anchor\" href=\"#創建容器\">#</a> 創建容器</h2>\n<ul>\n<li>方式一：類路徑加載配置文件</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n</code></pre>\n<ul>\n<li>方式二：使用 bean 名稱獲取並指定類型</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n</code></pre>\n<ul>\n<li>加載多個配置文件</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n</code></pre>\n<h2 id=\"獲取bean\"><a class=\"markdownIt-Anchor\" href=\"#獲取bean\">#</a> 獲取 bean</h2>\n<ul>\n<li>方式一：使用 bean 名稱獲取</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n</code></pre>\n<ul>\n<li>方式二：使用 bean 名稱獲取並指定類型</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n</code></pre>\n<ul>\n<li>方法三：使用 bean 類型獲取</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao= ctx.getBean(BookDao.class);\n\n</code></pre>\n<h1 id=\"核心容器總結\"><a class=\"markdownIt-Anchor\" href=\"#核心容器總結\">#</a> 核心容器總結</h1>\n<ol>\n<li>容器相關</li>\n<li>bean 相關</li>\n<li>依賴注入相關</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>BeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載</li>\n<li>applicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載</li>\n<li>applicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能</li>\n<li>applicationContext 接口常用初始化類\n<ul>\n<li>ClassPathXmlApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th><code>中央處理器(cpu)</code></th>\n<th style=\"text-align:center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>數據記憶體；資料記憶體</td>\n<td style=\"text-align:center\">data memory</td>\n<td>CPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置</td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>----</td>\n</tr>\n</tbody>\n</table>\n<!-- ![](https://i.imgur.com/SL7B0Pp.png)\n\n# register\n\n\n\n![](https://i.imgur.com/4w1KkJW.gif)\n\n -->\n<h1 id=\"jump-指令-細分種類\"><a class=\"markdownIt-Anchor\" href=\"#jump-指令-細分種類\">#</a> jump 指令 細分種類</h1>\n<table>\n<thead>\n<tr>\n<th><code>暫存器種類</code></th>\n<th style=\"text-align:center\"><code>Function</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>資料暫存器</td>\n<td style=\"text-align:center\">用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。</td>\n<td>功能</td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>:----:</td>\n<td>:---------:</td>\n<td>:----:</td>\n<td>:-------:</td>\n<td>--------</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li></li>\n</ul>\n<p><img src=\"https://i.imgur.com/2yW1q3o.png\" alt=\"\"></p>\n<h1 id=\"講解-register-與-verilog-程式結構\"><a class=\"markdownIt-Anchor\" href=\"#講解-register-與-verilog-程式結構\">#</a> 講解 REGISTER 與 verilog 程式結構</h1>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[name=bill503084699]</p></blockquote>\n<ol>\n<li></li>\n</ol>\n<p><img src=\"https://i.imgur.com/oTlKj0Y.png\" alt=\"\"><br>\n2. 介紹以 Register 的架構所呈現出來的圖</p>\n<pre><code>  用第三組的圖去做詮釋\n</code></pre>\n<p><img src=\"https://i.imgur.com/5RzVbCZ.jpg\" alt=\"\"></p>\n<h2 id=\"定義接腳\"><a class=\"markdownIt-Anchor\" href=\"#定義接腳\">#</a> 定義接腳</h2>\n<ol start=\"3\">\n<li>\n<p>依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來</p>\n<p>然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先</p>\n</li>\n</ol>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<ul>\n<li>前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間</li>\n</ul>\n<ol start=\"4\">\n<li>相關圖片比較 (比較知道腳位寫在哪)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td><img src=\"https://i.imgur.com/1td3mjj.jpg\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"https://i.imgur.com/Mb9roNA.jpg\" alt=\"\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>:----:</td>\n<td>:---------:</td>\n<td>:----:</td>\n<td>:-------:</td>\n<td>--------</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"設定register-內定的假設式子\"><a class=\"markdownIt-Anchor\" href=\"#設定register-內定的假設式子\">#</a> 設定 register 內定的假設式子</h2>\n<pre><code class=\"language-verilog=\">reg[31:0]regfile[31:0];\n</code></pre>\n<p>||||<br>\n5. kim 總結 32 個抽屜 裏頭有 32 個格</p>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<ul>\n<li></li>\n</ul>\n<hr>\n<h4 id=\"補充下面\"><a class=\"markdownIt-Anchor\" href=\"#補充下面\">#</a> 補充下面</h4>\n<hr>\n<hr>\n<p>clock always 的式子</p>\n<pre><code class=\"language-verilog=\">always@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n</code></pre>\n<hr>\n<h4 id=\"補充-下面\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面\">#</a> 補充 下面</h4>\n<p>謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數<br>\n不是 bit 表示<br>\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用</p>\n<p>結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改<br>\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此</p>\n<p>當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0</p>\n<pre><code class=\"language-verilog=\">`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n</code></pre>\n<hr>\n<p>clk  將 reset=1’b1 改成！reset 的式子</p>\n<pre><code class=\"language-verilog=\">\n        \n</code></pre>\n<hr>\n<ul>\n<li>if (reset=1’b1) reset 拉起來的時候去做重製</li>\n<li>if (!reset)     reset 放下來的時候去做重製</li>\n</ul>\n<p>最終呈現 register 電路圖</p>\n<p><img src=\"https://i.imgur.com/yYUHqF1.png\" alt=\"\"></p>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<hr>\n<h4 id=\"補充-下面-2\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面-2\">#</a> 補充 下面</h4>\n<p><img src=\"https://i.imgur.com/HRXvRxw.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"參考資料\"><a class=\"markdownIt-Anchor\" href=\"#參考資料\">#</a> 參考資料</h2>\n<ul>\n<li><a href=\"https://half-engr.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BF%85%E5%AD%B8%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98-hackmd-notion/\">工程師必學電子筆記</a></li>\n<li><a href=\"https://koshizuow.gitbook.io/compilerbook/machine_code_assembler/cpu_memory\">CPU 與記憶體</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/457620455\">自己動手寫 RISC-V CPU -（4）增加分支預測功能</a></li>\n</ul>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "AI生成繪圖"
            ]
        },
        {
            "id": "http://example.com/post/index%206.html",
            "url": "http://example.com/post/index%206.html",
            "title": "學習網頁後端ssm框架筆記（黑馬",
            "date_published": "2023-11-04T13:52:14.005Z",
            "content_html": "<h2 id=\"自從看了用springboot建立一個小而美的blogb站視頻後就發現如今若是要建立一個博客可能相對於jpa來說mybatics更適合用來當作是入門程式小白的優先選擇可能不是執行效率最快但是至少開發來講沒這麼折騰燒腦\"><a class=\"markdownIt-Anchor\" href=\"#自從看了用springboot建立一個小而美的blogb站視頻後就發現如今若是要建立一個博客可能相對於jpa來說mybatics更適合用來當作是入門程式小白的優先選擇可能不是執行效率最快但是至少開發來講沒這麼折騰燒腦\">#</a> 自從看了 &quot;用 springboot 建立一個小而美的 blog&quot;B 站視頻後，就發現如今若是要建立一個博客，可能相對於 jpa 來說 mybatics 更適合用來當作是入門程式小白的優先選擇，可能不是執行效率最快，但是至少開發來講沒這麼折騰燒腦</h2>\n<h2 id=\"tags-黑馬ssm\"><a class=\"markdownIt-Anchor\" href=\"#tags-黑馬ssm\">#</a> tags: 黑馬 ssm</h2>\n<h1 id=\"依賴注入方式-20230929\"><a class=\"markdownIt-Anchor\" href=\"#依賴注入方式-20230929\">#</a> 依賴注入方式 20230929</h1>\n<p>[TOC]</p>\n<h2 id=\"思考向一個類中傳遞數據的方法有幾種\"><a class=\"markdownIt-Anchor\" href=\"#思考向一個類中傳遞數據的方法有幾種\">#</a> 思考：向一個類中傳遞數據的方法有幾種？</h2>\n<h4 id=\"普通方法set方法\"><a class=\"markdownIt-Anchor\" href=\"#普通方法set方法\">#</a> 普通方法 (set 方法)</h4>\n<h4 id=\"構造方法\"><a class=\"markdownIt-Anchor\" href=\"#構造方法\">#</a> 構造方法</h4>\n<h2 id=\"思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢\"><a class=\"markdownIt-Anchor\" href=\"#思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢\">#</a> 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？</h2>\n<ul>\n<li>\n<p>引用類型</p>\n</li>\n<li>\n<p>簡單類型（基本數據類型 string）</p>\n</li>\n<li>\n<p>依賴注入方式</p>\n<ul>\n<li>setter 注入<br>\n - 簡單類型<br>\n - 引用類型</li>\n<li>構造器 注入<br>\n - 簡單類型<br>\n - 引用類型</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的 set 方法</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n<ul>\n<li>配置中使用 property 標籤 value 屬性注入簡單類型數據</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<hr>\n<h1 id=\"構造器注入\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入\">#</a> 構造器注入</h1>\n<pre><code class=\"language-java=\">&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n</code></pre>\n<ul>\n<li>\n<p>構造器注入 — 引用類型（了解）</p>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的<strong>構造</strong>方法</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n</code></pre>\n<p>- 配置中使用<strong> constructor-arg</strong> 標籤 ref 屬性注入引用類型對象</p>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n</code></pre>\n<h2 id=\"構造器注入-簡單類型\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入-簡單類型\">#</a> 構造器注入 -- 簡單類型</h2>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的 set 方法</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n</code></pre>\n<ul>\n<li>配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h2 id=\"構造器注入-參數適配\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入-參數適配\">#</a> 構造器注入 — 參數適配</h2>\n<ul>\n<li>配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n</code></pre>\n<ul>\n<li>配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>依賴注入方式選擇</p>\n<ol>\n<li>強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現</li>\n<li>可選依賴使用 setter 注入進行，靈活性強</li>\n<li>spring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹</li>\n<li>如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入</li>\n<li>實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入</li>\n<li><strong>自己開發的模塊推薦使用 setter 注入</strong></li>\n</ol>\n<h3 id=\"小結\"><a class=\"markdownIt-Anchor\" href=\"#小結\">#</a> 小結</h3>\n<ol>\n<li>依賴注入方式\n<ul>\n<li>setter 注入\n<ul>\n<li>簡單類型</li>\n<li>引用類型</li>\n</ul>\n</li>\n<li>構造器注入\n<ul>\n<li>簡單類型</li>\n<li>引用類型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>依賴注入方式選擇\n<ul>\n<li>建議使用 setter 注入</li>\n<li>第三方技術根據情況選擇</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"依賴自動裝配\"><a class=\"markdownIt-Anchor\" href=\"#依賴自動裝配\">#</a> 依賴自動裝配</h1>\n<ul>\n<li>配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n</code></pre>\n<h2 id=\"依賴自動裝配特征\"><a class=\"markdownIt-Anchor\" href=\"#依賴自動裝配特征\">#</a> 依賴自動裝配特征</h2>\n<ul>\n<li>自動裝配用於引用類型依賴注入，不能對簡單類型進行操作</li>\n<li>使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用</li>\n<li>使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合</li>\n<li>自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效</li>\n</ul>\n<h3 id=\"小結-2\"><a class=\"markdownIt-Anchor\" href=\"#小結-2\">#</a> 小結</h3>\n<ol>\n<li>自動裝配概念</li>\n<li>自動裝配類型</li>\n</ol>\n<hr>\n<h1 id=\"注入集合對象\"><a class=\"markdownIt-Anchor\" href=\"#注入集合對象\">#</a> 注入集合對象</h1>\n<ul>\n<li>\n<p>注入數組對象</p>\n<ul>\n<li>數組</li>\n<li>list</li>\n<li>set</li>\n<li>map</li>\n<li>properties</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n</code></pre>\n<h3 id=\"小結-3\"><a class=\"markdownIt-Anchor\" href=\"#小結-3\">#</a> 小結</h3>\n<ol>\n<li>注入集合</li>\n</ol>\n<h1 id=\"案例數據源對象管理\"><a class=\"markdownIt-Anchor\" href=\"#案例數據源對象管理\">#</a> 案例：數據源對象管理</h1>\n<ul>\n<li>\n<p>第三方資源配置管理</p>\n</li>\n<li>\n<p>導入 druid 座標</p>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n</code></pre>\n<ul>\n<li>配置數據源對象作為 spring 管理的 bean</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h3 id=\"小結-4\"><a class=\"markdownIt-Anchor\" href=\"#小結-4\">#</a> 小結</h3>\n<ol>\n<li>\n<p>spring 管理第三方資源</p>\n<ul>\n<li>DruidDataSource</li>\n<li>ComboPooledDataSource</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=\"加載properties文件\"><a class=\"markdownIt-Anchor\" href=\"#加載properties文件\">#</a> 加載 properties 文件</h1>\n<ul>\n<li>不加載系統屬性</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n</code></pre>\n<ul>\n<li>加載多個 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n</code></pre>\n<ul>\n<li>加載所以 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n</code></pre>\n<ul>\n<li>加載 properties 文件標準格式</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n</code></pre>\n<ul>\n<li>從類路徑或 jar 包中搜索並加載 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n</code></pre>\n<h3 id=\"小結-5\"><a class=\"markdownIt-Anchor\" href=\"#小結-5\">#</a> 小結</h3>\n<ol>\n<li>加載 properties 配置文件信息</li>\n<li>開啟命名空間方式</li>\n</ol>\n<h1 id=\"容器\"><a class=\"markdownIt-Anchor\" href=\"#容器\">#</a> 容器</h1>\n<ol>\n<li>創建容器</li>\n<li>獲取 bean</li>\n<li>容器類層次結構</li>\n<li>beanFactory</li>\n</ol>\n<h2 id=\"創建容器\"><a class=\"markdownIt-Anchor\" href=\"#創建容器\">#</a> 創建容器</h2>\n<ul>\n<li>方式一：類路徑加載配置文件</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n</code></pre>\n<ul>\n<li>方式二：使用 bean 名稱獲取並指定類型</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n</code></pre>\n<ul>\n<li>加載多個配置文件</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n</code></pre>\n<h2 id=\"獲取bean\"><a class=\"markdownIt-Anchor\" href=\"#獲取bean\">#</a> 獲取 bean</h2>\n<ul>\n<li>方式一：使用 bean 名稱獲取</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n</code></pre>\n<ul>\n<li>方式二：使用 bean 名稱獲取並指定類型</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n</code></pre>\n<ul>\n<li>方法三：使用 bean 類型獲取</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao= ctx.getBean(BookDao.class);\n\n</code></pre>\n<h1 id=\"核心容器總結\"><a class=\"markdownIt-Anchor\" href=\"#核心容器總結\">#</a> 核心容器總結</h1>\n<ol>\n<li>容器相關</li>\n<li>bean 相關</li>\n<li>依賴注入相關</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>BeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載</li>\n<li>applicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載</li>\n<li>applicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能</li>\n<li>applicationContext 接口常用初始化類\n<ul>\n<li>ClassPathXmlApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th><code>中央處理器(cpu)</code></th>\n<th style=\"text-align:center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>數據記憶體；資料記憶體</td>\n<td style=\"text-align:center\">data memory</td>\n<td>CPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置</td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>----</td>\n</tr>\n</tbody>\n</table>\n<!-- ![](https://i.imgur.com/SL7B0Pp.png)\n\n# register\n\n\n\n![](https://i.imgur.com/4w1KkJW.gif)\n\n -->\n<h1 id=\"jump-指令-細分種類\"><a class=\"markdownIt-Anchor\" href=\"#jump-指令-細分種類\">#</a> jump 指令 細分種類</h1>\n<table>\n<thead>\n<tr>\n<th><code>暫存器種類</code></th>\n<th style=\"text-align:center\"><code>Function</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>資料暫存器</td>\n<td style=\"text-align:center\">用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。</td>\n<td>功能</td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>:----:</td>\n<td>:---------:</td>\n<td>:----:</td>\n<td>:-------:</td>\n<td>--------</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li></li>\n</ul>\n<p><img src=\"https://i.imgur.com/2yW1q3o.png\" alt=\"\"></p>\n<h1 id=\"講解-register-與-verilog-程式結構\"><a class=\"markdownIt-Anchor\" href=\"#講解-register-與-verilog-程式結構\">#</a> 講解 REGISTER 與 verilog 程式結構</h1>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[name=bill503084699]</p></blockquote>\n<ol>\n<li></li>\n</ol>\n<p><img src=\"https://i.imgur.com/oTlKj0Y.png\" alt=\"\"><br>\n2. 介紹以 Register 的架構所呈現出來的圖</p>\n<pre><code>  用第三組的圖去做詮釋\n</code></pre>\n<p><img src=\"https://i.imgur.com/5RzVbCZ.jpg\" alt=\"\"></p>\n<h2 id=\"定義接腳\"><a class=\"markdownIt-Anchor\" href=\"#定義接腳\">#</a> 定義接腳</h2>\n<ol start=\"3\">\n<li>\n<p>依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來</p>\n<p>然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先</p>\n</li>\n</ol>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<ul>\n<li>前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間</li>\n</ul>\n<ol start=\"4\">\n<li>相關圖片比較 (比較知道腳位寫在哪)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td><img src=\"https://i.imgur.com/1td3mjj.jpg\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"https://i.imgur.com/Mb9roNA.jpg\" alt=\"\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>:----:</td>\n<td>:---------:</td>\n<td>:----:</td>\n<td>:-------:</td>\n<td>--------</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"設定register-內定的假設式子\"><a class=\"markdownIt-Anchor\" href=\"#設定register-內定的假設式子\">#</a> 設定 register 內定的假設式子</h2>\n<pre><code class=\"language-verilog=\">reg[31:0]regfile[31:0];\n</code></pre>\n<p>||||<br>\n5. kim 總結 32 個抽屜 裏頭有 32 個格</p>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<ul>\n<li></li>\n</ul>\n<hr>\n<h4 id=\"補充下面\"><a class=\"markdownIt-Anchor\" href=\"#補充下面\">#</a> 補充下面</h4>\n<hr>\n<hr>\n<p>clock always 的式子</p>\n<pre><code class=\"language-verilog=\">always@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n</code></pre>\n<hr>\n<h4 id=\"補充-下面\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面\">#</a> 補充 下面</h4>\n<p>謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數<br>\n不是 bit 表示<br>\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用</p>\n<p>結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改<br>\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此</p>\n<p>當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0</p>\n<pre><code class=\"language-verilog=\">`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n</code></pre>\n<hr>\n<p>clk  將 reset=1’b1 改成！reset 的式子</p>\n<pre><code class=\"language-verilog=\">\n        \n</code></pre>\n<hr>\n<ul>\n<li>if (reset=1’b1) reset 拉起來的時候去做重製</li>\n<li>if (!reset)     reset 放下來的時候去做重製</li>\n</ul>\n<p>最終呈現 register 電路圖</p>\n<p><img src=\"https://i.imgur.com/yYUHqF1.png\" alt=\"\"></p>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<hr>\n<h4 id=\"補充-下面-2\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面-2\">#</a> 補充 下面</h4>\n<p><img src=\"https://i.imgur.com/HRXvRxw.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"參考資料\"><a class=\"markdownIt-Anchor\" href=\"#參考資料\">#</a> 參考資料</h2>\n<ul>\n<li><a href=\"https://half-engr.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BF%85%E5%AD%B8%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98-hackmd-notion/\">工程師必學電子筆記</a></li>\n<li><a href=\"https://koshizuow.gitbook.io/compilerbook/machine_code_assembler/cpu_memory\">CPU 與記憶體</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/457620455\">自己動手寫 RISC-V CPU -（4）增加分支預測功能</a></li>\n</ul>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "後端"
            ]
        },
        {
            "id": "http://example.com/post/index%202.html",
            "url": "http://example.com/post/index%202.html",
            "title": "工程測量人員の工作內容與心得",
            "date_published": "2023-11-04T10:47:47.912Z",
            "content_html": "<pre><code>https://i.imgur.com/ZKHlKFO.jpg\n</code></pre>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>\nS</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<p>date: 2022-10-1 10:52:36</p>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<h3 id=\"吳大哥今日教我的東西\"><a class=\"markdownIt-Anchor\" href=\"#吳大哥今日教我的東西\">#</a> 吳大哥今日教我的東西</h3>\n<ul>\n<li>\n<p>儀器藍芽的角朝上，放進箱子才能放得剛好 鏡頭朝下</p>\n</li>\n<li>\n<p>用小綾鏡放樣時請按 F4 2 是有出現 EDM 選擇放樣的種類 圓綾鏡 mini</p>\n</li>\n<li>\n<p>大綾鏡 (1.300m) 圓綾鏡</p>\n</li>\n<li>\n<p>RL 純近距離 雷射</p>\n</li>\n<li>\n<p>小綾鏡本身 10cm 加一節加 30cm 以此類推 10 (0.010m) 40（0.040m） 70（0.070m） 100cm （0.100m）因此在綾鏡高上有 0.010m，0.040m,0.070m,0.100m</p>\n<ul>\n<li>記得要對◇綾鏡</li>\n<li>高呈才會有扣掉本身綾鏡的高度</li>\n</ul>\n</li>\n<li>\n<p>今天測的名稱 3c153 到 3c156</p>\n</li>\n<li>\n<pre><code>     3b153到3c156\n</code></pre>\n</li>\n<li>\n<p>第一步 查找測點 輸入 ABC DEF 字母要多按才能準確找其英文數字，輸入完點號會出現 點號的 xyh</p>\n</li>\n<li>\n<p>要看紅點要用按翻頁</p>\n</li>\n<li>\n<p>然後會出現綾鏡高與角度偏差與水平角度與高呈角度，調□Hz 角度偏差（左右）要用雙手調整個儀器與右邊的旋鈕角度偏差，0’00’10 以內</p>\n</li>\n<li>\n<p>然後調◇___水平角度（上下）要用‘單’手調整整個儀器與左邊的按鈕</p>\n</li>\n<li>\n<p>調完要按測距 (不可以調完再調左邊旋鈕) 然後再調水平角度，調到 0.00X（盡量 0.005 以下）再按翻頁兩次看高呈 181.200 剪掉原先 181.XxX 就是往上多少高呈 ex:181.122 往上 7.8</p>\n<ul>\n<li>重點要看紅點跑到哪測距按完再看數字（這很重要）</li>\n</ul>\n</li>\n<li>\n<p>儀器周遭走路要輕盈不可以重走與噴漆地板有石頭不可以撥石頭土壤撥到儀器的腳</p>\n</li>\n<li>\n<p>儀器按鈕輕輕按，不然會一次調太多</p>\n</li>\n<li>\n<p>今天吳大哥設的點 rwl1 rwl2</p>\n</li>\n<li>\n<p>後方交會按（重要）測量距離按鈕設點後再按 f1 測量更多點之後按 f4 計算這時候重點先不要按設定 F4，要看誤差值，如果小於 0.005 即可，超過則重測，如果都 ok 就按設定即設定完成</p>\n</li>\n<li>\n<p>氣泡校正在快捷鍵一功能介面裡面的</p>\n</li>\n<li>\n<p>調角度偏差（0”00‘xx 這樣即可）與水平角度偏差其實不用看紅點，要看紅點的是距離在水平◇＿__0.xxx 公尺（裡面），或是再按一次翻頁看◇L___0.005 以下即可</p>\n</li>\n<li>\n<p>工作檔怎麼樣都不要碰除非開機第一次沒設定</p>\n</li>\n<li>\n<p>後方交會第一步 “改 EDM 綾鏡 圓綾鏡” 查找點然後繼續然後對準第一點的大綾鏡然後按 “測距” 然後按測存，F1 測量更多點 F2 相容性 F3 正負鏡 F4 計算，先按 F1 然後對好然後測距再測存之後再按 f4 這時候要等不要亂按任何鍵之後也不要按太快 F4 設定測出誤差值必須小於 0.00‘05 以內或是 0.005m 以內這時候才可以按 F4 設定，如果超過上面的值要重新後方交會（程式 測站）</p>\n</li>\n<li>\n<p>轉旋鈕如果□L 是正則是往下旋轉</p>\n</li>\n<li>\n<p>轉旋鈕如果◇L 是負則是往上旋轉</p>\n</li>\n<li>\n<p>（主要是看選扭下面怎麼轉就是點是往哪裡）</p>\n</li>\n<li>\n<p>如果□L 是正則是要往後（助手角度）L 是負則是要往前</p>\n</li>\n<li>\n<p>如果筷子敲到石頭敲不進去那要選擇釘子然後敲完要噴漆一圈</p>\n</li>\n<li>\n<p>之後要在家裡練習拿小綾鏡測量距離 幾公分幾公分</p>\n</li>\n<li>\n<p>月眉的鋼筋要要幫安全旗外加寫上高程，高程要盡量噴漆噴好</p>\n</li>\n<li>\n<p>善化要選擇座標測量然後架好儀器再投設</p>\n</li>\n<li>\n<p>筷子敲進去有緊即可，噴漆要記得噴清楚</p>\n</li>\n<li>\n<p>當主測能不要遇到複測也就是幫忙檢測前組量的記號能不要測就不要測，能避開就避開</p>\n</li>\n<li>\n<p>負的就是後退，正的就是前進</p>\n</li>\n<li>\n<p>綾鏡其實四節中有一節自平的，這樣才不會有落差 2mm</p>\n</li>\n</ul>\n<h2 id=\"台中第二場\"><a class=\"markdownIt-Anchor\" href=\"#台中第二場\">#</a> 台中第二場</h2>\n<ul>\n<li>志伸 放柱腳是 300 個點 100 柱最快</li>\n<li>其實我們公司算是偏向土木不算是測量，測量只是附加，一般測量公司不會選擇這類工程做</li>\n<li>嗯……RL 是雷射 IR 是綾鏡</li>\n<li>沒調反光貼紙會不會誤差很大，平面誤差通常降低到幾毫米比較準的，如果沒辦法該怎麼辦？豪哥說沒辦法</li>\n<li>平面水準誤差要幾毫米才準</li>\n<li>吳大哥被監工說測太慢</li>\n<li>後方交會如果有兩工作檔都同時有那個測點那就要在工作檔特地找點通常是測點不是已知點</li>\n<li>可以後方交會兩個點再測更多個點會更準</li>\n<li>然後像是測基柱不要太準？平面誤差不要超過 2cm1cm 以上（這個要問志伸）</li>\n<li>吳大哥講得有些太雞蛋挑骨頭，要是砂子地才需要注意測量機腳不要踏太重，然後挑腳不用刻意再踩，不用誤差極為精準</li>\n<li>照理來說測柱點要三個點？，兩個就夠了</li>\n<li>然後通常測量這個工程可能出差都要很久而且都要到處要把高速公路當家裡後院</li>\n<li>組長以前是生物科技</li>\n<li>問達哥排休假的 google 資料表</li>\n<li>leica geo office 軟體把資料傳進去，把 gsi 傳進去</li>\n</ul>\n<h2 id=\"1111117-凌晨補筆記\"><a class=\"markdownIt-Anchor\" href=\"#1111117-凌晨補筆記\">#</a> 1111117 凌晨補筆記</h2>\n<ul>\n<li>如果助手要增加精準度，可以測手勢或是腳步伐的距離或是在家練習</li>\n<li>用 csv 轉點的話要記得輸出到 dsi 檔的時候首先是東跟北</li>\n<li>autocad 按 3p 可以多重特殊點 按功能 多重點 可以顯點</li>\n<li>開啟 excl 按測量 展點 跑到 2007cad（2015 的 autocad 不行用） 然後對著多重線點按一下，excl 就會出現收點的座標 可以收點</li>\n<li>可以展點</li>\n<li>如果誤差太大的話可以先後方交會完然後去測量控制點，然後再用測點去測，誤差可以低於 0.002 這樣就沒有誤差</li>\n<li>半半校正法其實不用校正管氣泡，基本上只會差 1.2 mm 那怕是導線測量測高程其實也不用校正管氣泡 (?)</li>\n<li>如果後方教會的夾角太小其實沒辦法測兩點交會</li>\n<li>（查驗）如果放樣有誤差可以用平行位移但最多只能 1m</li>\n<li>森霸的圖都是放大 autocad1000 倍，其他都只有 100 倍，森霸的圖改動非常快有時候已經做下去但沒辦法再動了</li>\n<li>月眉只要注意信哥</li>\n<li>釘子怕敲到手可以用鉗子</li>\n<li>森霸誤差小於 1cm，月眉誤差小於 2cm</li>\n</ul>\n<h2 id=\"111117-水準儀使用方法\"><a class=\"markdownIt-Anchor\" href=\"#111117-水準儀使用方法\">#</a> 111117 水準儀使用方法</h2>\n<ul>\n<li>behind | front 使用為 後方交會 流水點（間視，轉點） 前方交會</li>\n<li>按紐為上與下與 menu 跟 esc</li>\n<li>一定要後視完才能前視與間視</li>\n<li>改點號與改設定高程的中文翻譯是相反的</li>\n<li>用 gps 定位一要藍色上面那一條為測高程的基準</li>\n</ul>\n<h2 id=\"1111129\"><a class=\"markdownIt-Anchor\" href=\"#1111129\">#</a> 1111129</h2>\n<ul>\n<li>\n<p>反光貼紙不用設到反光貼紙直接 RL 即可</p>\n</li>\n<li>\n<p>助手從前視變成到後視點的時候絕對不能動，（柏謙曾經犯下的錯誤）</p>\n</li>\n<li>\n<p>gps 弄到的錯誤</p>\n</li>\n<li>\n<p>如果測越遠的話高呈誤差越多就是儀器的垂直角有誤差</p>\n</li>\n<li>\n<p>組長說難怪間接高呈 s07 都會有誤差 (用全站儀測高呈) 都會有誤差</p>\n</li>\n<li>\n<p>先用座標定向 繼續 然後打點號與測點號高程然後按設定 然後中間會出現誤差 要先記住 然後之後會測量，因此會先要</p>\n</li>\n<li>\n<p>測量跟測站差在哪</p>\n</li>\n<li>\n<p>台語不行</p>\n</li>\n</ul>\n<h1 id=\"森霸電廠\"><a class=\"markdownIt-Anchor\" href=\"#森霸電廠\">#</a> 森霸電廠</h1>\n<ul>\n<li>\n<p>測一米線測 gsi gl 高呈 只需要先定平，先測一個控制點記高程然後去按 fnz 之後去 位移然後扣掉你想要的高程之後去加上你最初的高程</p>\n</li>\n<li>\n<p>座標定向 附測你自己想要的點就是要用座標定位先架好你現在的控制點之後然後去設站按座標定位現在全站儀架的控制點在哪邊然後設好點之後先看誤差多少然後在附冊下一點的時候要記得按偏移以誤差為主（組長是以這個座標定向下去測控制點的誤差）</p>\n</li>\n<li>\n<p>角度定向 對於測閉合導線時會用到的測站功能，先架好最初的點輸入好第一個控制點也量完儀器高也要在註記上按 2 之後，會出現角度定向要你後視的一個點也要把後視的點與菱鏡高給輸入進去之後再把註記輸入 2, 這樣就 ok 之後再輸入前視用測量然後測佔紀錄這樣就完成一個點的導線測量，兒繼續下一個點就是要由上一個前視的點下去架站再後視上個架站的控制點依此類推</p>\n</li>\n<li>\n<p>據吳大哥表示，測一個平面的東西如果太遠可以用大拇哥下去當垂直面點在點上如果測懸崖平面的點用此方法可以防止測到後面的東西，永翔測量的人會用一種金屬十字點下去取代大拇哥，貌似會更精準嗎？</p>\n</li>\n<li>\n<p>永翔放樣或是敲控制點的釘子的時候會用刷子清那邊的沙塵再放樣險得有專業性</p>\n</li>\n<li>\n<p>要出發記得要帶的東西</p>\n<ul>\n<li>對講機＊人數 ＋電池＊1 or 2</li>\n<li>雨鞋或是捕魚防水衣</li>\n<li>水泥釘盒＊2</li>\n<li>腳架＊3</li>\n<li>菱鏡＊2</li>\n<li>tape</li>\n<li>捲尺＊2 到 3</li>\n<li>竹子一打</li>\n<li>模板用鋼筋一打</li>\n<li>安全帽與安全背心</li>\n<li>工程圖與放樣的點號列表</li>\n<li>全站儀與小破魯 大破魯 反光貼紙</li>\n<li>簽單</li>\n<li>點包</li>\n<li>竹筷子一打</li>\n<li>筆</li>\n<li>麥克筆 立可白 ＊n</li>\n<li>噴漆紅白＊n</li>\n<li>警示帶一整捲</li>\n<li>木樁（可有可無）</li>\n<li>一箱水</li>\n<li>鎚子 一個輕一個重</li>\n<li>工程車證</li>\n<li>（森霸電廠）工程車要記得綁紅布兩邊都要（定誠會靠背）</li>\n<li>充電線</li>\n<li>漏斗 水線 手套 防塵頭套 剛頭鞋 毛巾</li>\n</ul>\n</li>\n<li>\n<p>記得寫簽單 跟寫工作日誌與問明天有沒有要進場與拍照現場施工</p>\n<ul>\n<li>放樣的時候要記得如果前後交的菱鏡越是對補準要記得條放到越後面的話</li>\n<li>要記得如果有簽簽單要問工程師明天的工作是否有需要進工地</li>\n<li>回來記得儀器要收 gsi 座標</li>\n</ul>\n</li>\n<li>\n<p>測量上反光貼紙原場的 20 元 一般路燈上面會貼的 5 元</p>\n</li>\n<li>\n<p>ˇ3ˇ</p>\n</li>\n<li>\n<p>測量儀器如果垂直角有偏差相對誤差就會跟著偏差</p>\n</li>\n<li>\n<p>如果兩台儀器後方交會用同樣的點交會出來誤差差很多就代表有一台有著誤差需要校正</p>\n</li>\n<li>\n<p>當主測到現場首先要做的事情是要找控制點</p>\n</li>\n<li>\n<p>如果測量員被現場工程師跟民眾問說測量的地方有什麼不對盡量找理由搪塞 像是說當時測量員可能不是以測量所需要的面積下去講好說這塊面積為我的 又或者說對於同事測不對的點位可能是地殼變動之類總之要找理由不燃會顯德不專業</p>\n</li>\n<li>\n<p>打控制點盡量不要開紅點有時候因為反射會太亮導致交會不起來</p>\n</li>\n<li>\n<p>遇到儀器（已被同事摔到）交會起來特別慢才能交會出誤差出來</p>\n</li>\n<li>\n<p>遇到水準儀最後的誤差差 5cm 但用城市最後的結果為準的是因為平差距離相同互相抵銷所導致的</p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "工作"
            ]
        },
        {
            "id": "http://example.com/post/index%203.html",
            "url": "http://example.com/post/index%203.html",
            "title": "全聯生鮮人員の打工心得",
            "date_published": "2023-11-04T10:40:17.228Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>\n<a href=\"https://i.imgur.com/ZKHlKFO.jpg\">https://i.imgur.com/ZKHlKFO.jpg</a></p>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>做快一個月 (後來放棄，剩叫貨跟後台管理沒學，很吃速度跟細心（我的死穴）</p>\n<h3 id=\"工作sop流程\"><a class=\"markdownIt-Anchor\" href=\"#工作sop流程\">#</a> 工作 sop 流程</h3>\n<p>驗貨大概要 15 分鐘以內要驗完，早上第一件事情印價卡與折價卡貼折扣要 7:30 最慢要把蛋糕麵包貼完，補貨到驗單最慢要到 10:30（至少），每過一個星期要加速一次，上午下午都要各拍照 4 張整個都要拍照（蛋糕麵包調理魚肉加生鮮室清掃拍水溝 3 整體 1），一定要寫筆記（我的筆記本寫到爛掉），目前聽是干貨跟門市工作比較稍稍少一點點？（沒做過干貨不過要搬重物門市要推 pxpay…） （dcard 圖片為何這麼模糊啊……）4:30 有時候要叫賣試吃（這看每家店經理怎麼做，我家的全聯是放大聲公還是錄音擺在那客人要吃自己去拿，我待的店是要兩個人在那邊）</p>\n<p>檔案傳輸  機器：登入 (這個輸入一次機器就會記住了)  2. XXX <a href=\"http://3.XXX\">3.XXX</a>  <a href=\"http://1.XXX\">1.XXX</a><br>\n 商品折扣  機器 ：登入  1. XXX 5. XXX 4.  XXX <a href=\"http://1.XXX\">1.XXX</a>（不知道你看不看得懂……）</p>\n<p>冷凍櫃跟調理最上面一排每周一折價一次 6 折</p>\n<p>下面這張是我記性不好夾在手機殼里可以直接拿出來看呼出碼，<br>\n蝦子早上 40 下午 41 晚上 42<br>\n 透抽跟秋刀魚入庫冷凍要入庫表 3</p>\n<p><a href=\"https://i.imgur.com/tlJULup.png\">https://i.imgur.com/tlJULup.png</a><br>\n<a href=\"https://i.imgur.com/AgAmHWo.png\">https://i.imgur.com/AgAmHWo.png</a></p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "工作"
            ]
        },
        {
            "id": "http://example.com/post/index%205.html",
            "url": "http://example.com/post/index%205.html",
            "title": "印刷學徒の打工心得",
            "date_published": "2023-11-04T09:31:56.928Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>\n<a href=\"https://i.imgur.com/ZKHlKFO.jpg\">https://i.imgur.com/ZKHlKFO.jpg</a></p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>date: 2022-09-11 10:52:36<br>\nMore info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "工作"
            ]
        },
        {
            "id": "http://example.com/post/index.html",
            "url": "http://example.com/post/index.html",
            "title": "房務員の打工心得",
            "date_published": "2023-11-04T09:25:33.672Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<p>date: 2023-02-12 16:02:36</p>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "工作"
            ]
        },
        {
            "id": "http://example.com/post/index%204.html",
            "url": "http://example.com/post/index%204.html",
            "title": "景觀修復師の工作心得",
            "date_published": "2023-11-04T09:25:22.472Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>\n<a href=\"https://i.imgur.com/ZKHlKFO.jpg\">https://i.imgur.com/ZKHlKFO.jpg</a></p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<p>date: 2023-10-11 10:52:36</p>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "工作"
            ]
        }
    ]
}