{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"coding\" category",
    "description": "sdf",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/post/index%2011.html",
            "url": "http://example.com/post/index%2011.html",
            "title": "使用2dlive在blog與老婆們相遇 （折騰中",
            "date_published": "2023-11-19T09:13:19.320Z",
            "content_html": "<p>之前折騰兩個星期才將少女放在我的博客旁</p>\n<p>依賴注入方式 20230929<br>\n[TOC]</p>\n<hr>\n<h4 id=\"補充-下面\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面\">#</a> 補充 下面</h4>\n<p>謝祥辰 — 2022/07/28     我在網路上查到的資料是指個數<br>\n不是 bit 表示<br>\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用</p>\n<p>結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改<br>\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此</p>\n<p>當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0</p>\n<pre><code class=\"language-verilog=\">`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n</code></pre>\n<hr>\n<p>clk  將 reset=1’b1 改成！reset 的式子</p>\n<pre><code class=\"language-verilog=\">\n        \n</code></pre>\n<hr>\n<ul>\n<li>if (reset=1’b1) reset 拉起來的時候去做重製</li>\n<li>if (!reset)     reset 放下來的時候去做重製</li>\n</ul>\n<p>最終呈現 register 電路圖</p>\n<p><img src=\"https://i.imgur.com/yYUHqF1.png\" alt=\"\"></p>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<hr>\n<h4 id=\"補充-下面-2\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面-2\">#</a> 補充 下面</h4>\n<p><img src=\"https://i.imgur.com/HRXvRxw.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"參考資料\"><a class=\"markdownIt-Anchor\" href=\"#參考資料\">#</a> 參考資料</h2>\n<ul>\n<li><a href=\"https://half-engr.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BF%85%E5%AD%B8%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98-hackmd-notion/\">工程師必學電子筆記</a></li>\n<li><a href=\"https://koshizuow.gitbook.io/compilerbook/machine_code_assembler/cpu_memory\">CPU 與記憶體</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/457620455\">自己動手寫 RISC-V CPU -（4）增加分支預測功能</a></li>\n</ul>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"引用文獻\"><a class=\"markdownIt-Anchor\" href=\"#引用文獻\">#</a> 引用文獻</h3>\n<div id=\"refer-anchor-1\"></div>\n<ul>\n<li>[1] <a href=\"http://xueshu.baidu.com/\">百度学术</a></li>\n</ul>\n<div id=\"refer-anchor-2\"></div>\n<ol start=\"0\">\n<li>[在网页中添加 Live2D 看板娘]（<a href=\"https://github.com/stevenjoezhang/live2d-widget%EF%BC%89\">https://github.com/stevenjoezhang/live2d-widget）</a></li>\n<li><a href=\"https://akilar.top/posts/5b8f515f/\">akilar 的糖果屋 -Live2d Widget </a></li>\n<li><a href=\"https://c10udlnk.top/\">c10udlnk 的 blog</a></li>\n<li><a href=\"https://amayaliu.cn/Diary/DiaryLive2D.html\">amaya 夜雨</a></li>\n<li><a href=\"https://c10udlnk.top/\">c10udlnk 的 blog</a></li>\n<li><a href=\"https://www.fghrsh.net/post/123.html\">fghrsh 的博客 - 网页添加 Live2D 看板娘</a></li>\n<li><a href=\"https://eikanya.github.io/\">Eikanya’s Blog（看板娘動畫大佬）</a></li>\n<li><a href=\"https://eikanya.github.io/post/live2d%E9%85%8D%E7%BD%AE/\">Eikanya’s Blog - Live2d 配置 - Live2d 的 moc3 設定說明</a><br>\n 7.5. <a href=\"https://eikanya.github.io/post/%E5%8F%8C%E7%94%9F%E8%A7%86%E7%95%8C/#%E5%87%86%E5%A4%87%E5%B7%A5%E5%85%B7\">Eikanya’s Blog - 雙生 live2d 提取</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1957513\">筱鋒 xiao_lfeng</a></li>\n<li><a href=\"https://paugram.com/coding/add-poster-girl-with-plugin.html\">保羅的小宇宙 - 給你的部落格增加動態看板娘</a></li>\n<li><a href=\"https://blueheart0621.github.io/live2d_demo/demo3-waifu-tips.html\">お前はどこまで見えている </a></li>\n<li>[部落格通用版 Live2d 伊斯特瓦爾發布] (<a href=\"https://www.wikimoe.com/?post=76\">https://www.wikimoe.com/?post=76</a>)</li>\n<li><a href=\"https://nocilol.me/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02/\">惡 e 魔 m 蘿 lo 莉 li 控 - 為部落格加入能動的看板娘 (Live2D)- 將其加入網頁上吧</a></li>\n<li><a href=\"https://paugram.com/coding/add-poster-girl-with-plugin.html\">給你的部落格增加動態看板娘</a></li>\n<li>[pio]（<a href=\"https://docs.paul.ren/pio/#/?id=%e5%bc%95%e7%94%a8-css-%e8%b5%84%e6%ba%90%EF%BC%89\">https://docs.paul.ren/pio/#/?id = 引用 - css - 资源）</a><br>\n(<a href=\"https://github.com/Dreamer-Paul/Pio\">https://github.com/Dreamer-Paul/Pio</a>)</li>\n<li><a href=\"https://yzs020220.github.io/posts/41158/\">Hexo 部落格新增 live2d 看板娘 - 可換裝，增刪模型</a></li>\n<li><a href=\"https://www.spriters-resource.com/mobile/mainichicompileheart/\">海量模型まいにちコンパイルハート neptune model</a></li>\n<li><a href=\"https://awdr74100.github.io/2020-02-17-webpack-install/\">Roya’s Blog   Webpack 前端打包工具 - 環境安裝與基本配置</a></li>\n<li><a href=\"https://mx.paul.ren/model/neptune.html\">夢像</a></li>\n<li><a href=\"https://juejin.cn/s/live2dviewerex%E8%B5%84%E6%BA%90%E5%8C%85%E4%B8%8B%E8%BD%BD\">live2dviewerex 资源包下载</a></li>\n<li><a href=\"https://juejin.cn/post/7287914031515582523\">前端制作 live2D 看板娘 (一</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV11z4y1F7XL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6abadf229df823dd10d2fed723fc091f\">【Live2D 免费模型】点击领取超可爱大姐姐</a></li>\n<li><a href=\"https://juejin.cn/post/6844903689438625806\">純乾貨！live2d 動畫製作簡述以及踩坑</a></li>\n<li><a href=\"https://github.com/Eikanya/Live2d-model\">海量模型</a></li>\n<li><a href=\"https://live2d.fghrsh.net/demo/1.4.2/\">demo fgrsh html</a></li>\n</ol>\n",
            "tags": [
                "2dlive"
            ]
        },
        {
            "id": "http://example.com/post/index%2010.html",
            "url": "http://example.com/post/index%2010.html",
            "title": "使用linux玩原神Genshin impact 之dawn補丁用法 （原神3.8之後即可不用!但會被米哈遊回報給後台）",
            "date_published": "2023-11-05T13:38:56.552Z",
            "content_html": "<p>之前折騰很久的 linux 玩原神的方法，每次更新就要用一次</p>\n<h1 id=\"依賴注入方式-20230929\"><a class=\"markdownIt-Anchor\" href=\"#依賴注入方式-20230929\">#</a> 依賴注入方式 20230929</h1>\n<p>[TOC]</p>\n<p>## 評價</p>\n<p>工作環境：★ ★ ★ ★ ☆<br>\n工作難度：★ ☆ ☆ ☆ ☆<br>\n工作速度：★ ★ ★ ☆ ☆<br>\n工作量  ：★ ★ ★ ★ ★ ★</p>\n<hr>\n<h4 id=\"補充-下面\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面\">#</a> 補充 下面</h4>\n<p>謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數<br>\n不是 bit 表示<br>\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用</p>\n<p>結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改<br>\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此</p>\n<p>當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0</p>\n<pre><code class=\"language-verilog=\">`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n</code></pre>\n<hr>\n<p>clk  將 reset=1’b1 改成！reset 的式子</p>\n<pre><code class=\"language-verilog=\">\n        \n</code></pre>\n<hr>\n<ul>\n<li>if (reset=1’b1) reset 拉起來的時候去做重製</li>\n<li>if (!reset)     reset 放下來的時候去做重製</li>\n</ul>\n<p>最終呈現 register 電路圖</p>\n<p><img src=\"https://i.imgur.com/yYUHqF1.png\" alt=\"\"></p>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<hr>\n<h4 id=\"補充-下面-2\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面-2\">#</a> 補充 下面</h4>\n<p><img src=\"https://i.imgur.com/HRXvRxw.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"參考資料\"><a class=\"markdownIt-Anchor\" href=\"#參考資料\">#</a> 參考資料</h2>\n<ul>\n<li><a href=\"https://half-engr.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BF%85%E5%AD%B8%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98-hackmd-notion/\">工程師必學電子筆記</a></li>\n<li><a href=\"https://koshizuow.gitbook.io/compilerbook/machine_code_assembler/cpu_memory\">CPU 與記憶體</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/457620455\">自己動手寫 RISC-V CPU -（4）增加分支預測功能</a></li>\n</ul>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "補丁"
            ]
        },
        {
            "id": "http://example.com/post/index%206.html",
            "url": "http://example.com/post/index%206.html",
            "title": "學習網頁後端ssm框架筆記（黑馬",
            "date_published": "2023-11-04T13:52:14.005Z",
            "content_html": "<h2 id=\"自從看了用springboot建立一個小而美的blogb站視頻後就發現如今若是要建立一個博客可能相對於jpa來說mybatics更適合用來當作是入門程式小白的優先選擇可能不是執行效率最快但是至少開發來講沒這麼折騰燒腦\"><a class=\"markdownIt-Anchor\" href=\"#自從看了用springboot建立一個小而美的blogb站視頻後就發現如今若是要建立一個博客可能相對於jpa來說mybatics更適合用來當作是入門程式小白的優先選擇可能不是執行效率最快但是至少開發來講沒這麼折騰燒腦\">#</a> 自從看了 &quot;用 springboot 建立一個小而美的 blog&quot;B 站視頻後，就發現如今若是要建立一個博客，可能相對於 jpa 來說 mybatics 更適合用來當作是入門程式小白的優先選擇，可能不是執行效率最快，但是至少開發來講沒這麼折騰燒腦</h2>\n<h2 id=\"tags-黑馬ssm\"><a class=\"markdownIt-Anchor\" href=\"#tags-黑馬ssm\">#</a> tags: 黑馬 ssm</h2>\n<h1 id=\"依賴注入方式-20230929\"><a class=\"markdownIt-Anchor\" href=\"#依賴注入方式-20230929\">#</a> 依賴注入方式 20230929</h1>\n<p>[TOC]</p>\n<h2 id=\"思考向一個類中傳遞數據的方法有幾種\"><a class=\"markdownIt-Anchor\" href=\"#思考向一個類中傳遞數據的方法有幾種\">#</a> 思考：向一個類中傳遞數據的方法有幾種？</h2>\n<h4 id=\"普通方法set方法\"><a class=\"markdownIt-Anchor\" href=\"#普通方法set方法\">#</a> 普通方法 (set 方法)</h4>\n<h4 id=\"構造方法\"><a class=\"markdownIt-Anchor\" href=\"#構造方法\">#</a> 構造方法</h4>\n<h2 id=\"思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢\"><a class=\"markdownIt-Anchor\" href=\"#思考依賴注入描述了在容器中建立bean與bean之間依賴關係的過程如果bean運行需要的是數字或字符串呢\">#</a> 思考：依賴注入描述了在容器中建立 bean 與 bean 之間依賴關係的過程，如果 bean 運行需要的是數字或字符串呢？</h2>\n<ul>\n<li>\n<p>引用類型</p>\n</li>\n<li>\n<p>簡單類型（基本數據類型 string）</p>\n</li>\n<li>\n<p>依賴注入方式</p>\n<ul>\n<li>setter 注入<br>\n - 簡單類型<br>\n - 引用類型</li>\n<li>構造器 注入<br>\n - 簡單類型<br>\n - 引用類型</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的 set 方法</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connecitonNumber = connectionNumber;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h1>\n<ul>\n<li>配置中使用 property 標籤 value 屬性注入簡單類型數據</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id =&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoIml&quot;&gt;\n    &lt;property name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<hr>\n<h1 id=\"構造器注入\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入\">#</a> 構造器注入</h1>\n<pre><code class=\"language-java=\">&lt;?xml vversion=&quot;1.0&quot; encoding=&quot;UTF-8?&quot;\n&lt;bean xmlns=&quot;htp://www.springframework.org/schema/beans&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans....&quot;\n        \n        &lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoIml&quot;/&gt;\n        &lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;\n            &lt;constructor-arg\n        &lt;/bean&gt;\n</code></pre>\n<ul>\n<li>\n<p>構造器注入 — 引用類型（了解）</p>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的<strong>構造</strong>方法</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookServiceImpl implements BookService&#123;\n    private BookDao bookDao;\n    public BookServiceImpl(BookDao bookDao)&#123;\n        this.bookDao=bookDao;\n    &#125;\n&#125;\n</code></pre>\n<p>- 配置中使用<strong> constructor-arg</strong> 標籤 ref 屬性注入引用類型對象</p>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot;&gt;\n &lt;constructor-arg name=&quot;bookDao&quot; ref=&quot;bookDao&quot;/&gt;\n&lt;/bean&gt;\n&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n</code></pre>\n<h2 id=\"構造器注入-簡單類型\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入-簡單類型\">#</a> 構造器注入 -- 簡單類型</h2>\n<ul>\n<li>在 bean 中定義引用類型屬性並提供可訪問的 set 方法</li>\n</ul>\n<pre><code class=\"language-java=\">public class BookDaoImpl implements BookDao&#123;\n    private int connectionNumber;\n    public void setConnectionNumber(int connectionNumber)&#123;\n        this.connectionNumber =connectionNumber;\n    &#125;\n&#125;\n</code></pre>\n<ul>\n<li>配置中使用 constructor-arg 標籤 value 屬性注入簡單類型數據</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg name=&quot;connectionNumber&quot; value=&quot;10&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h2 id=\"構造器注入-參數適配\"><a class=\"markdownIt-Anchor\" href=\"#構造器注入-參數適配\">#</a> 構造器注入 — 參數適配</h2>\n<ul>\n<li>配置中使用 constructor-arg 標籤 type 屬性設置按形參類型注入</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.itheima.dao.iml.BookDaoImpl&quot;&gt;\n    &lt;constructor-arg type=&quot;int&quot;value=&quot;10&quot;/&gt;\n    &lt;consturctor-arg type=&quot;java.lang.String&quot;value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt; \n</code></pre>\n<ul>\n<li>配置中使用 constructor-arg 標籤 index 屬性設置按形參位置注入</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao&quot; class=&quot;com.tieima.dao.impl.BookDaoImpl&quot;&gt;\n   &lt;constructor-arg index=&quot;0&quot; value=&quot;10&quot;/&gt;\n   &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<p>依賴注入方式選擇</p>\n<ol>\n<li>強制依賴使用構造器進行，使用 setter 注入有概率不進行注入導致 null 對象出現</li>\n<li>可選依賴使用 setter 注入進行，靈活性強</li>\n<li>spring 框架倡導使用構造器，第三方框架內部大多數採用構造器注入的形式形數據初始化，相對嚴謹</li>\n<li>如果有必要可以兩者同時使用，使用構造器注入完成強制依賴的注入，使用 setter 注入完成可選依賴的注入</li>\n<li>實際開發過程中還要根據實際情況分析，如果受到控制對象沒有提供 setter 方法就必須使用構造器注入</li>\n<li><strong>自己開發的模塊推薦使用 setter 注入</strong></li>\n</ol>\n<h3 id=\"小結\"><a class=\"markdownIt-Anchor\" href=\"#小結\">#</a> 小結</h3>\n<ol>\n<li>依賴注入方式\n<ul>\n<li>setter 注入\n<ul>\n<li>簡單類型</li>\n<li>引用類型</li>\n</ul>\n</li>\n<li>構造器注入\n<ul>\n<li>簡單類型</li>\n<li>引用類型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>依賴注入方式選擇\n<ul>\n<li>建議使用 setter 注入</li>\n<li>第三方技術根據情況選擇</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"依賴自動裝配\"><a class=\"markdownIt-Anchor\" href=\"#依賴自動裝配\">#</a> 依賴自動裝配</h1>\n<ul>\n<li>配置中使用 bean 標籤 autowire 屬性設置自動裝配的類型</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;bookDao &quot; class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;/&gt;\n&lt;bean id=&quot;bookService&quot; class=&quot;com.itheima.service.impl.BookServiceImpl&quot; autowire=&quot;byType&quot;/&gt;\n</code></pre>\n<h2 id=\"依賴自動裝配特征\"><a class=\"markdownIt-Anchor\" href=\"#依賴自動裝配特征\">#</a> 依賴自動裝配特征</h2>\n<ul>\n<li>自動裝配用於引用類型依賴注入，不能對簡單類型進行操作</li>\n<li>使用按類型裝配時（byType) 必須保障容器中相同類型的 bean 唯一，推薦使用</li>\n<li>使用按名稱裝配時（byName) 必須保障容器中具有指定名稱的 bean, 因變名與配置耦合</li>\n<li>自動裝配優先圾低於 setter 注入與構造器注入，同時出現自動裝配配置失效</li>\n</ul>\n<h3 id=\"小結-2\"><a class=\"markdownIt-Anchor\" href=\"#小結-2\">#</a> 小結</h3>\n<ol>\n<li>自動裝配概念</li>\n<li>自動裝配類型</li>\n</ol>\n<hr>\n<h1 id=\"注入集合對象\"><a class=\"markdownIt-Anchor\" href=\"#注入集合對象\">#</a> 注入集合對象</h1>\n<ul>\n<li>\n<p>注入數組對象</p>\n<ul>\n<li>數組</li>\n<li>list</li>\n<li>set</li>\n<li>map</li>\n<li>properties</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;property name=&quot;array&quot;&gt;\n    &lt;array&gt;\n        &lt;value&gt;100&lt;/value&gt;\n        &lt;value&gt;200&lt;/value&gt;\n        &lt;value&gt;300&lt;/value&gt;\n    &lt;/array&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;list&quot;&gt;\n    &lt;list&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/list&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;set&quot;&gt;\n    &lt;set&gt;\n        &lt;value&gt;itcast&lt;/value&gt;\n        &lt;value&gt;itheima&lt;/value&gt;\n        &lt;value&gt;boxuegu&lt;/value&gt;\n    &lt;/set&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;map&quot;&gt;\n    &lt;map&gt;\n        &lt;entry key=&quot;country&quot; value=&quot;china&quot;/&gt;\n        &lt;entry key=&quot;province&quot; value=&quot;henan&quot;/&gt;\n        &lt;entry key=&quot;city&quot; value=&quot;kaifeng&quot;/&gt;\n    &lt;/map&gt;\n&lt;/property&gt;\n</code></pre>\n<pre><code class=\"language-java=\">&lt;property name=&quot;properties&quot;&gt;\n    &lt;props&gt;\n        &lt;prop key=&quot;country&quot;&gt;china&lt;/prop&gt;\n        &lt;prop key=&quot;province&quot;&gt;henan&lt;/prop&gt;\n        &lt;prop key=&quot;city&quot;&gt;kaifeng&lt;/prop&gt;\n    &lt;/props&gt;\n&lt;/property&gt;\n</code></pre>\n<h3 id=\"小結-3\"><a class=\"markdownIt-Anchor\" href=\"#小結-3\">#</a> 小結</h3>\n<ol>\n<li>注入集合</li>\n</ol>\n<h1 id=\"案例數據源對象管理\"><a class=\"markdownIt-Anchor\" href=\"#案例數據源對象管理\">#</a> 案例：數據源對象管理</h1>\n<ul>\n<li>\n<p>第三方資源配置管理</p>\n</li>\n<li>\n<p>導入 druid 座標</p>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n    &lt;artifacId&gt;druid&lt;/artifacId&gt;\n    &lt;version&gt;1.1.16&lt;/version&gt;\n&lt;/dependency&gt;\n\n</code></pre>\n<ul>\n<li>配置數據源對象作為 spring 管理的 bean</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.poo1.DruidDataSource&quot;&gt;\n    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring_db&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n&lt;/bean&gt;\n</code></pre>\n<h3 id=\"小結-4\"><a class=\"markdownIt-Anchor\" href=\"#小結-4\">#</a> 小結</h3>\n<ol>\n<li>\n<p>spring 管理第三方資源</p>\n<ul>\n<li>DruidDataSource</li>\n<li>ComboPooledDataSource</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=\"加載properties文件\"><a class=\"markdownIt-Anchor\" href=\"#加載properties文件\">#</a> 加載 properties 文件</h1>\n<ul>\n<li>不加載系統屬性</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;\n</code></pre>\n<ul>\n<li>加載多個 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;jdbc.properties,msg.properties&quot; /&gt;\n</code></pre>\n<ul>\n<li>加載所以 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder locaiton=&quot;*.properties&quot;/&gt;\n</code></pre>\n<ul>\n<li>加載 properties 文件標準格式</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;classpath:*.properties&quot;/&gt;\n</code></pre>\n<ul>\n<li>從類路徑或 jar 包中搜索並加載 properties 文件</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;context:property-placeholder location=&quot;classpath*:*.properties&quot;/&gt;\n</code></pre>\n<h3 id=\"小結-5\"><a class=\"markdownIt-Anchor\" href=\"#小結-5\">#</a> 小結</h3>\n<ol>\n<li>加載 properties 配置文件信息</li>\n<li>開啟命名空間方式</li>\n</ol>\n<h1 id=\"容器\"><a class=\"markdownIt-Anchor\" href=\"#容器\">#</a> 容器</h1>\n<ol>\n<li>創建容器</li>\n<li>獲取 bean</li>\n<li>容器類層次結構</li>\n<li>beanFactory</li>\n</ol>\n<h2 id=\"創建容器\"><a class=\"markdownIt-Anchor\" href=\"#創建容器\">#</a> 創建容器</h2>\n<ul>\n<li>方式一：類路徑加載配置文件</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n</code></pre>\n<ul>\n<li>方式二：使用 bean 名稱獲取並指定類型</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new FileSystemXmlApplicationContext(&quot;D://applicationContext.xml&quot;)\n</code></pre>\n<ul>\n<li>加載多個配置文件</li>\n</ul>\n<pre><code class=\"language-java=\">ApplicationContext ctx= new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;,&quot;bean2.xml&quot;);\n</code></pre>\n<h2 id=\"獲取bean\"><a class=\"markdownIt-Anchor\" href=\"#獲取bean\">#</a> 獲取 bean</h2>\n<ul>\n<li>方式一：使用 bean 名稱獲取</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao=(BookDao)ctx.getBean(&quot;bookDao&quot;);\n\n</code></pre>\n<ul>\n<li>方式二：使用 bean 名稱獲取並指定類型</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao = ctx.getBean(&quot;bookDao&quot;, BookDao.class);\n\n</code></pre>\n<ul>\n<li>方法三：使用 bean 類型獲取</li>\n</ul>\n<pre><code class=\"language-java=\">BookDao bookDao= ctx.getBean(BookDao.class);\n\n</code></pre>\n<h1 id=\"核心容器總結\"><a class=\"markdownIt-Anchor\" href=\"#核心容器總結\">#</a> 核心容器總結</h1>\n<ol>\n<li>容器相關</li>\n<li>bean 相關</li>\n<li>依賴注入相關</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>BeanFactory 是 ioc 容器的頂層接口，初始化 beanfactory 對象時，加載的 bean 延遲加載</li>\n<li>applicationContext 接口是 spring 容器的核心接口，初始化時 bean 立即加載</li>\n<li>applicationContext 接口提供基礎的 bean 操作相關方法，通過其他接口擴展其功能</li>\n<li>applicationContext 接口常用初始化類\n<ul>\n<li>ClassPathXmlApplicationContext</li>\n<li>FileSystemXmlApplicationContext</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java=\">&lt;bean\n    id=&quot;bookDao&quot;\n    name=&quot;dao bookDaoImpl daoImpl&quot;\n    class=&quot;com.itheima.dao.impl.BookDaoImpl&quot;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th><code>中央處理器(cpu)</code></th>\n<th style=\"text-align:center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>數據記憶體；資料記憶體</td>\n<td style=\"text-align:center\">data memory</td>\n<td>CPU 做完算術或邏輯運算後的結果必要時要回存到記憶體或 I/O 裝置</td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>----</td>\n</tr>\n</tbody>\n</table>\n<!-- ![](https://i.imgur.com/SL7B0Pp.png)\n\n# register\n\n\n\n![](https://i.imgur.com/4w1KkJW.gif)\n\n -->\n<h1 id=\"jump-指令-細分種類\"><a class=\"markdownIt-Anchor\" href=\"#jump-指令-細分種類\">#</a> jump 指令 細分種類</h1>\n<table>\n<thead>\n<tr>\n<th><code>暫存器種類</code></th>\n<th style=\"text-align:center\"><code>Function</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>資料暫存器</td>\n<td style=\"text-align:center\">用來儲存整數數字（參考以下的浮點暫存器）。在某些簡單（或舊）的 CPU，特別的資料暫存器是用於數學計算的累加器。</td>\n<td>功能</td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>:----:</td>\n<td>:---------:</td>\n<td>:----:</td>\n<td>:-------:</td>\n<td>--------</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li></li>\n</ul>\n<p><img src=\"https://i.imgur.com/2yW1q3o.png\" alt=\"\"></p>\n<h1 id=\"講解-register-與-verilog-程式結構\"><a class=\"markdownIt-Anchor\" href=\"#講解-register-與-verilog-程式結構\">#</a> 講解 REGISTER 與 verilog 程式結構</h1>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[name=bill503084699]</p></blockquote>\n<ol>\n<li></li>\n</ol>\n<p><img src=\"https://i.imgur.com/oTlKj0Y.png\" alt=\"\"><br>\n2. 介紹以 Register 的架構所呈現出來的圖</p>\n<pre><code>  用第三組的圖去做詮釋\n</code></pre>\n<p><img src=\"https://i.imgur.com/5RzVbCZ.jpg\" alt=\"\"></p>\n<h2 id=\"定義接腳\"><a class=\"markdownIt-Anchor\" href=\"#定義接腳\">#</a> 定義接腳</h2>\n<ol start=\"3\">\n<li>\n<p>依照慣例我們先把模組名稱定義出來，接下來就是小括號 &quot;埠列信號&quot; 的部分，將輸入跟指定輸出到哪一個 以 rs1addr rs2addr 另外我們需要額外拉出兩條線控制輸入可以寫入還是說可以被讀，以 write anable 跟 read able 給列出來，將位址與 腳位是先定義出來</p>\n<p>然後 define 可以寫在其他地方？但寫出來會 vivado 比較好認，之後才會用到，這邊就先暫時這樣寫，不過在教學上我們先</p>\n</li>\n</ol>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<ul>\n<li>前面這些定義宣告都只是資料跟位置而已  接腳的話我們就先定義到這邊，但在 reg 5? 裏頭還有很多定義資料的空間</li>\n</ul>\n<ol start=\"4\">\n<li>相關圖片比較 (比較知道腳位寫在哪)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td><img src=\"https://i.imgur.com/1td3mjj.jpg\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"https://i.imgur.com/Mb9roNA.jpg\" alt=\"\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td colspan=\"2\"></td>\n<td>----</td>\n<td>:----:</td>\n<td>:----:</td>\n<td>:---------:</td>\n<td>:----:</td>\n<td>:-------:</td>\n<td>--------</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"設定register-內定的假設式子\"><a class=\"markdownIt-Anchor\" href=\"#設定register-內定的假設式子\">#</a> 設定 register 內定的假設式子</h2>\n<pre><code class=\"language-verilog=\">reg[31:0]regfile[31:0];\n</code></pre>\n<p>||||<br>\n5. kim 總結 32 個抽屜 裏頭有 32 個格</p>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<ul>\n<li></li>\n</ul>\n<hr>\n<h4 id=\"補充下面\"><a class=\"markdownIt-Anchor\" href=\"#補充下面\">#</a> 補充下面</h4>\n<hr>\n<hr>\n<p>clock always 的式子</p>\n<pre><code class=\"language-verilog=\">always@(posedge clk)begin  \n    if(reset==1'b1)begin  \n        if((we==1'b1)&amp;&amp;(wb_addr1 =0));//被告知要送到$0就拒絕不送\n        regfile[wb_addr]&lt;wb_data;    //[wb_addr]塞裡面你要對它做動作的位置,因此我們要寫入data寫到[wb_addr]的這個位置裡面,我們要寫入的動作還要連一條線去指定register要寫入到哪麼地方\n    end\nend\n        \n</code></pre>\n<hr>\n<h4 id=\"補充-下面\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面\">#</a> 補充 下面</h4>\n<p>謝祥辰 — 2022/07/28 我在網路上查到的資料是指個數<br>\n不是 bit 表示<br>\n willwho - 我記得當時做 ADL 的時候 bit 還可以 多個 bit 你還是要額外宣告它不然會出錯 但這邊都是 1bit 因此目前暫定不用</p>\n<p>結論 - 但我們 enable 都是 1bit 而已因此我們目前暫定不用改<br>\n然後 == 代表說不關多少位元只要遇到 ==0 都會代表 0 的關係因此</p>\n<p>當時 penquuin 提出來的問題，你先把 off  0 遞值 off0 指示全 0 , 因為沒試過說 == 能不能表 0</p>\n<pre><code class=\"language-verilog=\">`define regcomb 5 // comb為5\n`define regoff &#123;`regcomb&#123;`off&#125;&#125;\n`define offword &#123;32&#123;`off&#125;&#125;\n</code></pre>\n<hr>\n<p>clk  將 reset=1’b1 改成！reset 的式子</p>\n<pre><code class=\"language-verilog=\">\n        \n</code></pre>\n<hr>\n<ul>\n<li>if (reset=1’b1) reset 拉起來的時候去做重製</li>\n<li>if (!reset)     reset 放下來的時候去做重製</li>\n</ul>\n<p>最終呈現 register 電路圖</p>\n<p><img src=\"https://i.imgur.com/yYUHqF1.png\" alt=\"\"></p>\n<pre><code class=\"language-verilog=\">\n</code></pre>\n<hr>\n<h4 id=\"補充-下面-2\"><a class=\"markdownIt-Anchor\" href=\"#補充-下面-2\">#</a> 補充 下面</h4>\n<p><img src=\"https://i.imgur.com/HRXvRxw.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"參考資料\"><a class=\"markdownIt-Anchor\" href=\"#參考資料\">#</a> 參考資料</h2>\n<ul>\n<li><a href=\"https://half-engr.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%BF%85%E5%AD%B8%E9%9B%BB%E5%AD%90%E7%AD%86%E8%A8%98-hackmd-notion/\">工程師必學電子筆記</a></li>\n<li><a href=\"https://koshizuow.gitbook.io/compilerbook/machine_code_assembler/cpu_memory\">CPU 與記憶體</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/457620455\">自己動手寫 RISC-V CPU -（4）增加分支預測功能</a></li>\n</ul>\n<pre><code class=\"language-verilog=\">\n\n\n</code></pre>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": [
                "後端"
            ]
        }
    ]
}